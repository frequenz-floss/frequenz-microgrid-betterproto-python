{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Frequenz Microgrid API Python Bindings","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Bindings to the microgrid API generated using betterproto.</p> <p>Versions of this package matches the version of the API it is generated from.</p>"},{"location":"#supported-platforms","title":"Supported Platforms","text":"<p>The following platforms are officially supported (tested):</p> <ul> <li>Python: 3.11</li> <li>Operating System: Ubuntu Linux 20.04</li> <li>Architectures: amd64, arm64</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>If you want to know how to build this project and contribute to it, please check out the Contributing Guide.</p>"},{"location":"CONTRIBUTING/","title":"Contributing to Frequenz Microgrid API Python Bindings","text":""},{"location":"CONTRIBUTING/#build","title":"Build","text":"<p>You can use <code>build</code> to simply build the source and binary distribution:</p> <pre><code>python -m pip install build\npython -m build\n</code></pre>"},{"location":"CONTRIBUTING/#local-development","title":"Local development","text":"<p>You can use editable installs to develop the project locally (it will install all the dependencies too):</p> <pre><code>python -m pip install -e .\n</code></pre> <p>Or you can install all development dependencies (<code>mypy</code>, <code>pylint</code>, <code>pytest</code>, etc.) in one go too: <pre><code>python -m pip install -e .[dev]\n</code></pre></p> <p>If you don't want to install all the dependencies, you can also use <code>nox</code> to run the tests and other checks creating its own virtual environments:</p> <pre><code>python -m pip install .[dev-noxfile]\nnox\n</code></pre> <p>You can also use <code>nox -R</code> to reuse the current testing environment to speed up test at the expense of a higher chance to end up with a dirty test environment.</p>"},{"location":"CONTRIBUTING/#running-tests-checks-individually","title":"Running tests / checks individually","text":"<p>For a better development test cycle you can install the runtime and test dependencies and run <code>pytest</code> manually.</p> <pre><code>python -m pip install .[dev-pytest]  # included in .[dev] too\n\n# And for example\npytest tests/test_*.py\n</code></pre> <p>Or you can use <code>nox</code>:</p> <pre><code>nox -R -s pytest -- test/test_*.py\n</code></pre> <p>The same appliest to <code>pylint</code> or <code>mypy</code> for example:</p> <pre><code>nox -R -s pylint -- test/test_*.py\nnox -R -s mypy -- test/test_*.py\n</code></pre>"},{"location":"CONTRIBUTING/#building-the-documentation","title":"Building the documentation","text":"<p>To build the documentation, first install the dependencies (if you didn't install all <code>dev</code> dependencies):</p> <pre><code>python -m pip install -e .[dev-mkdocs]\n</code></pre> <p>Then you can build the documentation (it will be written in the <code>site/</code> directory):</p> <pre><code>mkdocs build\n</code></pre> <p>Or you can just serve the documentation without building it using:</p> <pre><code>mkdocs serve\n</code></pre> <p>Your site will be updated live when you change your files (provided that you used <code>pip install -e .</code>, beware of a common pitfall of using <code>pip install</code> without <code>-e</code>, in that case the API reference won't change unless you do a new <code>pip install</code>).</p> <p>To build multi-version documentation, we use mike. If you want to see how the multi-version sites looks like locally, you can use:</p> <pre><code>mike deploy my-version\nmike set-default my-version\nmike serve\n</code></pre> <p><code>mike</code> works in mysterious ways. Some basic information:</p> <ul> <li><code>mike deploy</code> will do a <code>mike build</code> and write the results to your local <code>gh-pages</code> branch. <code>my-version</code> is an arbitrary name for the local version   you want to preview.</li> <li><code>mike set-default</code> is needed so when you serve the documentation, it goes to   your newly produced documentation by default.</li> <li><code>mike serve</code> will serve the contents of your local <code>gh-pages</code> branch. Be   aware that, unlike <code>mkdocs serve</code>, changes to the sources won't be shown   live, as the <code>mike deploy</code> step is needed to refresh them.</li> </ul> <p>Be careful not to use <code>--push</code> with <code>mike deploy</code>, otherwise it will push your local <code>gh-pages</code> branch to the <code>origin</code> remote.</p> <p>That said, if you want to test the actual website in your fork, you can always use <code>mike deploy --push --remote your-fork-remote</code>, and then access the GitHub pages produced for your fork.</p>"},{"location":"CONTRIBUTING/#releasing","title":"Releasing","text":"<p>These are the steps to create a new release:</p> <ol> <li> <p>Get the latest head you want to create a release from.</p> </li> <li> <p>Update the <code>RELEASE_NOTES.md</code> file if it is not complete, up to date, and    remove template comments (<code>&lt;!-- ... -&gt;</code>) and empty sections. Submit a pull    request if an update is needed, wait until it is merged, and update the    latest head you want to create a release from to get the new merged pull    request.</p> </li> <li> <p>Create a new signed tag using the release notes and    a semver compatible version number with a <code>v</code> prefix,    for example:</p> </li> </ol> <pre><code>git tag -s --cleanup=whitespace -F RELEASE_NOTES.md v0.0.1\n</code></pre> <ol> <li> <p>Push the new tag.</p> </li> <li> <p>A GitHub action will test the tag and if all goes well it will create    a GitHub    Release,    and upload a new package to    PyPI    automatically.</p> </li> <li> <p>Once this is done, reset the <code>RELEASE_NOTES.md</code> with the template:</p> </li> </ol> <pre><code>cp .github/RELEASE_NOTES.template.md RELEASE_NOTES.md\n</code></pre> <p>Commit the new release notes and create a PR (this step should be automated    eventually too).</p> <ol> <li>Celebrate!</li> </ol>"},{"location":"CONTRIBUTING/#cross-arch-testing","title":"Cross-Arch Testing","text":"<p>This project has built-in support for testing across multiple architectures. Currently, our CI conducts tests on <code>arm64</code> machines using QEMU emulation. We also have the flexibility to expand this support to include additional architectures in the future.</p> <p>This project contains Dockerfiles that can be used in the CI to test the python package in non-native machine architectures, e.g., <code>arm64</code>. The Dockerfiles exist in the directory <code>.github/containers/nox-cross-arch</code>, and follow a naming scheme so that they can be easily used in build matrices in the CI, in <code>nox-cross-arch</code> job. The naming scheme is:</p> <pre><code>&lt;arch&gt;-&lt;os&gt;-python-&lt;python-version&gt;.Dockerfile\n</code></pre> <p>E.g.,</p> <pre><code>arm64-ubuntu-20.04-python-3.11.Dockerfile\n</code></pre> <p>If a Dockerfile for your desired target architecture, OS, and python version does not exist here, please add one before proceeding to add your options to the test matrix.</p>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>API Reference</li> <li>Contributing</li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>frequenz<ul> <li>microgrid<ul> <li>betterproto<ul> <li>frequenz<ul> <li>api<ul> <li>common<ul> <li>components</li> <li>metrics<ul> <li>electrical</li> </ul> </li> </ul> </li> <li>microgrid<ul> <li>battery</li> <li>common</li> <li>ev_charger</li> <li>grid</li> <li>inverter</li> <li>meter</li> <li>sensor</li> </ul> </li> </ul> </li> </ul> </li> <li>google<ul> <li>api</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/frequenz/microgrid/betterproto/","title":"Index","text":""},{"location":"reference/frequenz/microgrid/betterproto/#frequenz.microgrid.betterproto","title":"frequenz.microgrid.betterproto","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/","title":"Index","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/#frequenz.microgrid.betterproto.frequenz","title":"frequenz.microgrid.betterproto.frequenz","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/","title":"Index","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/#frequenz.microgrid.betterproto.frequenz.api","title":"frequenz.microgrid.betterproto.frequenz.api","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/","title":"Index","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/#frequenz.microgrid.betterproto.frequenz.api.common","title":"frequenz.microgrid.betterproto.frequenz.api.common","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/","title":"components","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components","title":"frequenz.microgrid.betterproto.frequenz.api.common.components","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components-classes","title":"Classes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.BatteryType","title":"frequenz.microgrid.betterproto.frequenz.api.common.components.BatteryType","text":"<p>             Bases: <code>Enum</code></p> <p>Enumerated battery types.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/common/components/__init__.py</code> <pre><code>class BatteryType(betterproto.Enum):\n    \"\"\"Enumerated battery types.\"\"\"\n\n    BATTERY_TYPE_UNSPECIFIED = 0\n    \"\"\"Unspecified.\"\"\"\n\n    BATTERY_TYPE_LI_ION = 1\n    \"\"\"Li-ion batteries.\"\"\"\n\n    BATTERY_TYPE_NA_ION = 2\n    \"\"\"Sodium-ion batteries\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.BatteryType-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.BatteryType.BATTERY_TYPE_LI_ION","title":"BATTERY_TYPE_LI_ION  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BATTERY_TYPE_LI_ION = 1\n</code></pre> <p>Li-ion batteries.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.BatteryType.BATTERY_TYPE_NA_ION","title":"BATTERY_TYPE_NA_ION  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BATTERY_TYPE_NA_ION = 2\n</code></pre> <p>Sodium-ion batteries</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.BatteryType.BATTERY_TYPE_UNSPECIFIED","title":"BATTERY_TYPE_UNSPECIFIED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BATTERY_TYPE_UNSPECIFIED = 0\n</code></pre> <p>Unspecified.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.ComponentCategory","title":"frequenz.microgrid.betterproto.frequenz.api.common.components.ComponentCategory","text":"<p>             Bases: <code>Enum</code></p> <p>Enumrated component categories.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/common/components/__init__.py</code> <pre><code>class ComponentCategory(betterproto.Enum):\n    \"\"\"Enumrated component categories.\"\"\"\n\n    COMPONENT_CATEGORY_UNSPECIFIED = 0\n    \"\"\"\n    An unknown component categories, useful for error handling, and marking\n    unknown components in a list of components with otherwise known categories.\n    \"\"\"\n\n    COMPONENT_CATEGORY_GRID = 1\n    \"\"\"The point where the local microgrid is connected to the grid.\"\"\"\n\n    COMPONENT_CATEGORY_METER = 2\n    \"\"\"\n    A meter, for measuring electrical metrics, e.g., current, voltage, etc.\n    \"\"\"\n\n    COMPONENT_CATEGORY_INVERTER = 3\n    \"\"\"An electricity generator, with batteries or solar energy.\"\"\"\n\n    COMPONENT_CATEGORY_CONVERTER = 4\n    \"\"\"A DC-DC converter.\"\"\"\n\n    COMPONENT_CATEGORY_BATTERY = 5\n    \"\"\"A storage system for electrical energy, used by inverters.\"\"\"\n\n    COMPONENT_CATEGORY_EV_CHARGER = 6\n    \"\"\"A station for charging electrical vehicles.\"\"\"\n\n    COMPONENT_CATEGORY_SENSOR = 7\n    \"\"\"\n    A sensor for measuring ambient metrics, e.g., temperature, humidity, etc.\n    \"\"\"\n\n    COMPONENT_CATEGORY_CRYPTO_MINER = 8\n    \"\"\"A crypto miner.\"\"\"\n\n    COMPONENT_CATEGORY_ELECTROLYZER = 9\n    \"\"\"An electrolyzer for converting water into hydrogen and oxygen.\"\"\"\n\n    COMPONENT_CATEGORY_CHP = 10\n    \"\"\"\n    A heat and power combustion plant (CHP stands for combined heat and power).\n    \"\"\"\n\n    COMPONENT_CATEGORY_RELAY = 11\n    \"\"\"\n    A relay. Relays generally have two states: open (connected) and closed\n    (disconnected). They are generally placed in front of a component, e.g., an\n    inverter, to control whether the component is connected to the grid or not.\n    \"\"\"\n\n    COMPONENT_CATEGORY_PRECHARGE_MODULE = 12\n    \"\"\"\n    A precharge module. Precharging involves gradually ramping up the DC\n    voltage to prevent any potential damage to sensitive electrical components\n    like capacitors. While many inverters and batteries come equipped with in-\n    built precharging mechanisms, some may lack this feature. In such cases, we\n    need to use external precharging modules.\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.ComponentCategory-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.ComponentCategory.COMPONENT_CATEGORY_BATTERY","title":"COMPONENT_CATEGORY_BATTERY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_CATEGORY_BATTERY = 5\n</code></pre> <p>A storage system for electrical energy, used by inverters.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.ComponentCategory.COMPONENT_CATEGORY_CHP","title":"COMPONENT_CATEGORY_CHP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_CATEGORY_CHP = 10\n</code></pre> <p>A heat and power combustion plant (CHP stands for combined heat and power).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.ComponentCategory.COMPONENT_CATEGORY_CONVERTER","title":"COMPONENT_CATEGORY_CONVERTER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_CATEGORY_CONVERTER = 4\n</code></pre> <p>A DC-DC converter.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.ComponentCategory.COMPONENT_CATEGORY_CRYPTO_MINER","title":"COMPONENT_CATEGORY_CRYPTO_MINER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_CATEGORY_CRYPTO_MINER = 8\n</code></pre> <p>A crypto miner.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.ComponentCategory.COMPONENT_CATEGORY_ELECTROLYZER","title":"COMPONENT_CATEGORY_ELECTROLYZER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_CATEGORY_ELECTROLYZER = 9\n</code></pre> <p>An electrolyzer for converting water into hydrogen and oxygen.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.ComponentCategory.COMPONENT_CATEGORY_EV_CHARGER","title":"COMPONENT_CATEGORY_EV_CHARGER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_CATEGORY_EV_CHARGER = 6\n</code></pre> <p>A station for charging electrical vehicles.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.ComponentCategory.COMPONENT_CATEGORY_GRID","title":"COMPONENT_CATEGORY_GRID  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_CATEGORY_GRID = 1\n</code></pre> <p>The point where the local microgrid is connected to the grid.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.ComponentCategory.COMPONENT_CATEGORY_INVERTER","title":"COMPONENT_CATEGORY_INVERTER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_CATEGORY_INVERTER = 3\n</code></pre> <p>An electricity generator, with batteries or solar energy.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.ComponentCategory.COMPONENT_CATEGORY_METER","title":"COMPONENT_CATEGORY_METER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_CATEGORY_METER = 2\n</code></pre> <p>A meter, for measuring electrical metrics, e.g., current, voltage, etc.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.ComponentCategory.COMPONENT_CATEGORY_PRECHARGE_MODULE","title":"COMPONENT_CATEGORY_PRECHARGE_MODULE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_CATEGORY_PRECHARGE_MODULE = 12\n</code></pre> <p>A precharge module. Precharging involves gradually ramping up the DC voltage to prevent any potential damage to sensitive electrical components like capacitors. While many inverters and batteries come equipped with in- built precharging mechanisms, some may lack this feature. In such cases, we need to use external precharging modules.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.ComponentCategory.COMPONENT_CATEGORY_RELAY","title":"COMPONENT_CATEGORY_RELAY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_CATEGORY_RELAY = 11\n</code></pre> <p>A relay. Relays generally have two states: open (connected) and closed (disconnected). They are generally placed in front of a component, e.g., an inverter, to control whether the component is connected to the grid or not.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.ComponentCategory.COMPONENT_CATEGORY_SENSOR","title":"COMPONENT_CATEGORY_SENSOR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_CATEGORY_SENSOR = 7\n</code></pre> <p>A sensor for measuring ambient metrics, e.g., temperature, humidity, etc.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.ComponentCategory.COMPONENT_CATEGORY_UNSPECIFIED","title":"COMPONENT_CATEGORY_UNSPECIFIED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_CATEGORY_UNSPECIFIED = 0\n</code></pre> <p>An unknown component categories, useful for error handling, and marking unknown components in a list of components with otherwise known categories.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.EvChargerType","title":"frequenz.microgrid.betterproto.frequenz.api.common.components.EvChargerType","text":"<p>             Bases: <code>Enum</code></p> <p>Enumerated EV charger types.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/common/components/__init__.py</code> <pre><code>class EvChargerType(betterproto.Enum):\n    \"\"\"Enumerated EV charger types.\"\"\"\n\n    EV_CHARGER_TYPE_UNSPECIFIED = 0\n    \"\"\"Default type.\"\"\"\n\n    EV_CHARGER_TYPE_AC = 1\n    \"\"\"The EV charging station supports AC charging only.\"\"\"\n\n    EV_CHARGER_TYPE_DC = 2\n    \"\"\"The EV charging station supports DC charging only.\"\"\"\n\n    EV_CHARGER_TYPE_HYBRID = 3\n    \"\"\"The EV charging station supports both AC and DC.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.EvChargerType-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.EvChargerType.EV_CHARGER_TYPE_AC","title":"EV_CHARGER_TYPE_AC  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>EV_CHARGER_TYPE_AC = 1\n</code></pre> <p>The EV charging station supports AC charging only.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.EvChargerType.EV_CHARGER_TYPE_DC","title":"EV_CHARGER_TYPE_DC  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>EV_CHARGER_TYPE_DC = 2\n</code></pre> <p>The EV charging station supports DC charging only.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.EvChargerType.EV_CHARGER_TYPE_HYBRID","title":"EV_CHARGER_TYPE_HYBRID  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>EV_CHARGER_TYPE_HYBRID = 3\n</code></pre> <p>The EV charging station supports both AC and DC.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.EvChargerType.EV_CHARGER_TYPE_UNSPECIFIED","title":"EV_CHARGER_TYPE_UNSPECIFIED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>EV_CHARGER_TYPE_UNSPECIFIED = 0\n</code></pre> <p>Default type.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.InverterType","title":"frequenz.microgrid.betterproto.frequenz.api.common.components.InverterType","text":"<p>             Bases: <code>Enum</code></p> <p>Enumerated inverter types.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/common/components/__init__.py</code> <pre><code>class InverterType(betterproto.Enum):\n    \"\"\"Enumerated inverter types.\"\"\"\n\n    INVERTER_TYPE_UNSPECIFIED = 0\n    \"\"\"Unspecified.\"\"\"\n\n    INVERTER_TYPE_BATTERY = 1\n    \"\"\"Battery inverter.\"\"\"\n\n    INVERTER_TYPE_SOLAR = 2\n    \"\"\"Solar inverter.\"\"\"\n\n    INVERTER_TYPE_HYBRID = 3\n    \"\"\"Hybrid inverter.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.InverterType-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.InverterType.INVERTER_TYPE_BATTERY","title":"INVERTER_TYPE_BATTERY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INVERTER_TYPE_BATTERY = 1\n</code></pre> <p>Battery inverter.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.InverterType.INVERTER_TYPE_HYBRID","title":"INVERTER_TYPE_HYBRID  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INVERTER_TYPE_HYBRID = 3\n</code></pre> <p>Hybrid inverter.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.InverterType.INVERTER_TYPE_SOLAR","title":"INVERTER_TYPE_SOLAR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INVERTER_TYPE_SOLAR = 2\n</code></pre> <p>Solar inverter.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.InverterType.INVERTER_TYPE_UNSPECIFIED","title":"INVERTER_TYPE_UNSPECIFIED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INVERTER_TYPE_UNSPECIFIED = 0\n</code></pre> <p>Unspecified.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.SensorType","title":"frequenz.microgrid.betterproto.frequenz.api.common.components.SensorType","text":"<p>             Bases: <code>Enum</code></p> <p>Enumerated sensor types.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/common/components/__init__.py</code> <pre><code>class SensorType(betterproto.Enum):\n    \"\"\"Enumerated sensor types.\"\"\"\n\n    SENSOR_TYPE_UNSPECIFIED = 0\n    \"\"\"Unspecified\"\"\"\n\n    SENSOR_TYPE_THERMOMETER = 1\n    \"\"\"Thermometer (temperature sensor)\"\"\"\n\n    SENSOR_TYPE_HYGROMETER = 2\n    \"\"\"Hygrometer (humidity sensor)\"\"\"\n\n    SENSOR_TYPE_BAROMETER = 3\n    \"\"\"Barometer (pressure sensor).\"\"\"\n\n    SENSOR_TYPE_PYRANOMETER = 4\n    \"\"\"Pyranometer (solar irradiance sensor).\"\"\"\n\n    SENSOR_TYPE_ANEMOMETER = 5\n    \"\"\"Anemometer (wind velocity and direction sensor).\"\"\"\n\n    SENSOR_TYPE_ACCELEROMETER = 6\n    \"\"\"Accelerometers (acceleration sensor).\"\"\"\n\n    SENSOR_TYPE_GENERAL = 7\n    \"\"\"General sensors, which do not fall in any of the above categories\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.SensorType-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.SensorType.SENSOR_TYPE_ACCELEROMETER","title":"SENSOR_TYPE_ACCELEROMETER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SENSOR_TYPE_ACCELEROMETER = 6\n</code></pre> <p>Accelerometers (acceleration sensor).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.SensorType.SENSOR_TYPE_ANEMOMETER","title":"SENSOR_TYPE_ANEMOMETER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SENSOR_TYPE_ANEMOMETER = 5\n</code></pre> <p>Anemometer (wind velocity and direction sensor).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.SensorType.SENSOR_TYPE_BAROMETER","title":"SENSOR_TYPE_BAROMETER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SENSOR_TYPE_BAROMETER = 3\n</code></pre> <p>Barometer (pressure sensor).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.SensorType.SENSOR_TYPE_GENERAL","title":"SENSOR_TYPE_GENERAL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SENSOR_TYPE_GENERAL = 7\n</code></pre> <p>General sensors, which do not fall in any of the above categories</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.SensorType.SENSOR_TYPE_HYGROMETER","title":"SENSOR_TYPE_HYGROMETER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SENSOR_TYPE_HYGROMETER = 2\n</code></pre> <p>Hygrometer (humidity sensor)</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.SensorType.SENSOR_TYPE_PYRANOMETER","title":"SENSOR_TYPE_PYRANOMETER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SENSOR_TYPE_PYRANOMETER = 4\n</code></pre> <p>Pyranometer (solar irradiance sensor).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.SensorType.SENSOR_TYPE_THERMOMETER","title":"SENSOR_TYPE_THERMOMETER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SENSOR_TYPE_THERMOMETER = 1\n</code></pre> <p>Thermometer (temperature sensor)</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/components/#frequenz.microgrid.betterproto.frequenz.api.common.components.SensorType.SENSOR_TYPE_UNSPECIFIED","title":"SENSOR_TYPE_UNSPECIFIED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SENSOR_TYPE_UNSPECIFIED = 0\n</code></pre> <p>Unspecified</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/","title":"Index","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/#frequenz.microgrid.betterproto.frequenz.api.common.metrics","title":"frequenz.microgrid.betterproto.frequenz.api.common.metrics","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/#frequenz.microgrid.betterproto.frequenz.api.common.metrics-classes","title":"Classes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.Bounds","title":"frequenz.microgrid.betterproto.frequenz.api.common.metrics.Bounds  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>A set of lower and upper bounds for any metric. The units of the bounds are always the same as the related metric.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/common/metrics/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Bounds(betterproto.Message):\n    \"\"\"\n    A set of lower and upper bounds for any metric. The units of the bounds are\n    always the same as the related metric.\n    \"\"\"\n\n    lower: float = betterproto.float_field(1)\n    \"\"\"The lower bound.\"\"\"\n\n    upper: float = betterproto.float_field(2)\n    \"\"\"The upper bound.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.Bounds-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.Bounds.lower","title":"lower  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lower: float = float_field(1)\n</code></pre> <p>The lower bound.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.Bounds.upper","title":"upper  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>upper: float = float_field(2)\n</code></pre> <p>The upper bound.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.Metric","title":"frequenz.microgrid.betterproto.frequenz.api.common.metrics.Metric  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>A metric's value, with optional limits.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/common/metrics/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Metric(betterproto.Message):\n    \"\"\"A metric's value, with optional limits.\"\"\"\n\n    value: float = betterproto.float_field(1)\n    \"\"\"The current value of the metric.\"\"\"\n\n    rated_bounds: \"Bounds\" = betterproto.message_field(2)\n    \"\"\"\n    The manufacturer's rated bounds of the metric. This may differ from\n    `system_bounds` as it does not take into account the current state of the\n    overall system.\n    \"\"\"\n\n    component_bounds: \"Bounds\" = betterproto.message_field(3)\n    \"\"\"\n    The current bounds of the metric, as imposed by the component this metric\n    originates from.\n    \"\"\"\n\n    system_exclusion_bounds: \"Bounds\" = betterproto.message_field(4)\n    \"\"\"\n    These bounds indicate the range of values that are disallowed for the\n    metric. If these bounds for a metric are [`lower`, `upper`], then this\n    metric's `value` needs to comply with the constraints `value &lt;= lower` OR\n    `upper &lt;= value`. It is important to note that these bounds work together\n    with `system_inclusion_bounds`. E.g., for the system to accept a charge\n    command, clients need to request power values within the bounds\n    `[system_inclusion_bounds.lower, system_exclusion_bounds.lower]`. This\n    means that clients can only request charge commands with values that are\n    within the `system_inclusion_bounds`, but not within\n    `system_exclusion_bounds`. Similarly, for the system to accept a discharge\n    command, clients need to request power values within the bounds\n    `[system_exclusion_bounds.upper, system_inclusion_bounds.upper]`. The\n    following diagram illustrates the relationship between the bounds. ```\n    inclusion.lower                              inclusion.upper\n    &lt;-------|============|------------------|============|---------&gt;\n    exclusion.lower    exclusion.upper ``` ---- values here are disallowed and\n    wil be rejected ==== vales here are allowed and will be accepted\n    \"\"\"\n\n    system_inclusion_bounds: \"Bounds\" = betterproto.message_field(5)\n    \"\"\"\n    These bounds indicate the range of values that are allowed for the metric.\n    If these bounds for a metric are [`lower`, `upper`], then this metric's\n    `value` needs to comply with the constraint `lower &lt;= value &lt;= upper` It is\n    important to note that these bounds work together with\n    `system_exclusion_bounds`. E.g., for the system to accept a charge command,\n    clients need to request power values within the bounds\n    `[system_inclusion_bounds.lower, system_exclusion_bounds.lower]`. This\n    means that clients can only request charge commands with values that are\n    within the `system_inclusion_bounds`, but not within\n    `system_exclusion_bounds`. Similarly, for the system to accept a discharge\n    command, clients need to request power values within the bounds\n    `[system_exclusion_bounds.upper, system_inclusion_bounds.upper]`. The\n    following diagram illustrates the relationship between the bounds. ```\n    inclusion.lower                              inclusion.upper\n    &lt;-------|============|------------------|============|---------&gt;\n    exclusion.lower    exclusion.upper ``` ---- values here are disallowed and\n    wil be rejected ==== vales here are allowed and will be accepted\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.Metric-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.Metric.component_bounds","title":"component_bounds  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>component_bounds: Bounds = message_field(3)\n</code></pre> <p>The current bounds of the metric, as imposed by the component this metric originates from.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.Metric.rated_bounds","title":"rated_bounds  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rated_bounds: Bounds = message_field(2)\n</code></pre> <p>The manufacturer's rated bounds of the metric. This may differ from <code>system_bounds</code> as it does not take into account the current state of the overall system.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.Metric.system_exclusion_bounds","title":"system_exclusion_bounds  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>system_exclusion_bounds: Bounds = message_field(4)\n</code></pre> <p>These bounds indicate the range of values that are disallowed for the metric. If these bounds for a metric are [<code>lower</code>, <code>upper</code>], then this metric's <code>value</code> needs to comply with the constraints <code>value &lt;= lower</code> OR <code>upper &lt;= value</code>. It is important to note that these bounds work together with <code>system_inclusion_bounds</code>. E.g., for the system to accept a charge command, clients need to request power values within the bounds <code>[system_inclusion_bounds.lower, system_exclusion_bounds.lower]</code>. This means that clients can only request charge commands with values that are within the <code>system_inclusion_bounds</code>, but not within <code>system_exclusion_bounds</code>. Similarly, for the system to accept a discharge command, clients need to request power values within the bounds <code>[system_exclusion_bounds.upper, system_inclusion_bounds.upper]</code>. The following diagram illustrates the relationship between the bounds. <code>inclusion.lower                              inclusion.upper &lt;-------|============|------------------|============|---------&gt; exclusion.lower    exclusion.upper</code> ---- values here are disallowed and wil be rejected ==== vales here are allowed and will be accepted</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.Metric.system_inclusion_bounds","title":"system_inclusion_bounds  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>system_inclusion_bounds: Bounds = message_field(5)\n</code></pre> <p>These bounds indicate the range of values that are allowed for the metric. If these bounds for a metric are [<code>lower</code>, <code>upper</code>], then this metric's <code>value</code> needs to comply with the constraint <code>lower &lt;= value &lt;= upper</code> It is important to note that these bounds work together with <code>system_exclusion_bounds</code>. E.g., for the system to accept a charge command, clients need to request power values within the bounds <code>[system_inclusion_bounds.lower, system_exclusion_bounds.lower]</code>. This means that clients can only request charge commands with values that are within the <code>system_inclusion_bounds</code>, but not within <code>system_exclusion_bounds</code>. Similarly, for the system to accept a discharge command, clients need to request power values within the bounds <code>[system_exclusion_bounds.upper, system_inclusion_bounds.upper]</code>. The following diagram illustrates the relationship between the bounds. <code>inclusion.lower                              inclusion.upper &lt;-------|============|------------------|============|---------&gt; exclusion.lower    exclusion.upper</code> ---- values here are disallowed and wil be rejected ==== vales here are allowed and will be accepted</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.Metric.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: float = float_field(1)\n</code></pre> <p>The current value of the metric.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.MetricAggregation","title":"frequenz.microgrid.betterproto.frequenz.api.common.metrics.MetricAggregation  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Metrics depicted as a collection of statistical summaries. Useful when a component has to report multiple values for the same metric. E.g., a battery is a collection of several blocks, and each block has a temperature sensor. The battery can report a summary of the values provided by all these sensors, like, min, max, avg, etc., and if possible, the entire array of temperature values.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/common/metrics/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass MetricAggregation(betterproto.Message):\n    \"\"\"\n    Metrics depicted as a collection of statistical summaries. Useful when a\n    component has to report multiple values for the same metric. E.g., a\n    battery is a collection of several blocks, and each block has a temperature\n    sensor. The battery can report a summary of the values provided by all\n    these sensors, like, min, max, avg, etc., and if possible, the entire array\n    of temperature values.\n    \"\"\"\n\n    avg: float = betterproto.float_field(1)\n    \"\"\"The average value of the metric.\"\"\"\n\n    min: Optional[float] = betterproto.float_field(2, optional=True, group=\"_min\")\n    \"\"\"The minimum value of the metric.\"\"\"\n\n    max: Optional[float] = betterproto.float_field(3, optional=True, group=\"_max\")\n    \"\"\"The maximum value of the metric.\"\"\"\n\n    raw_values: List[float] = betterproto.float_field(12)\n    \"\"\"The array of all the metric values.\"\"\"\n\n    rated_bounds: \"Bounds\" = betterproto.message_field(13)\n    \"\"\"\n    The manufacturer's rated bounds of the metric. This may differ from\n    `system_bounds` as it does not take into account the current state of the\n    overall system.\n    \"\"\"\n\n    component_bounds: \"Bounds\" = betterproto.message_field(14)\n    \"\"\"\n    The current bounds of the metric, as imposed by the component this metric\n    originates from.\n    \"\"\"\n\n    system_exclusion_bounds: \"Bounds\" = betterproto.message_field(4)\n    \"\"\"\n    These bounds indicate the range of values that are disallowed for the\n    metric. If these bounds for a metric are [`lower`, `upper`], then this\n    metric's `value` needs to comply with the constraints `value &lt;= lower` OR\n    `upper &lt;= value`. It is important to note that these bounds work together\n    with `system_inclusion_bounds`. E.g., for the system to accept a charge\n    command, clients need to request power values within the bounds\n    `[system_inclusion_bounds.lower, system_exclusion_bounds.lower]`. This\n    means that clients can only request charge commands with power values that\n    are within the `system_inclusion_bounds`, but not within\n    `system_exclusion_bounds`. Similarly, for the system to accept a discharge\n    command, clients need to request power values within the bounds\n    `[system_exclusion_bounds.upper, system_inclusion_bounds.upper]`. The\n    following diagram illustrates the relationship between the bounds. ```\n    inclusion.lower                              inclusion.upper\n    &lt;-------|============|------------------|============|---------&gt;\n    exclusion.lower    exclusion.upper ``` ---- values here are disallowed and\n    wil be rejected ==== vales here are allowed and will be accepted\n    \"\"\"\n\n    system_inclusion_bounds: \"Bounds\" = betterproto.message_field(5)\n    \"\"\"\n    These bounds indicate the range of values that are allowed for the metric.\n    If these bounds for a metric are [`lower`, `upper`], then this metric's\n    `value` needs to comply with the constraint `lower &lt;= value &lt;= upper` It is\n    important to note that these bounds work together with\n    `system_exclusion_bounds`. E.g., for the system to accept a charge command,\n    clients need to request power values within the bounds\n    `[system_inclusion_bounds.lower, system_exclusion_bounds.lower]`. This\n    means that clients can only request charge commands with power values that\n    are within the `system_inclusion_bounds`, but not within\n    `system_exclusion_bounds`. Similarly, for the system to accept a discharge\n    command, clients need to request power values within the bounds\n    `[system_exclusion_bounds.upper, system_inclusion_bounds.upper]`. The\n    following diagram illustrates the relationship between the bounds. ```\n    inclusion.lower                              inclusion.upper\n    &lt;-------|============|------------------|============|---------&gt;\n    exclusion.lower    exclusion.upper ``` ---- values here are disallowed and\n    wil be rejected ==== vales here are allowed and will be accepted\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.MetricAggregation-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.MetricAggregation.avg","title":"avg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>avg: float = float_field(1)\n</code></pre> <p>The average value of the metric.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.MetricAggregation.component_bounds","title":"component_bounds  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>component_bounds: Bounds = message_field(14)\n</code></pre> <p>The current bounds of the metric, as imposed by the component this metric originates from.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.MetricAggregation.max","title":"max  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>max: Optional[float] = float_field(\n    3, optional=True, group=\"_max\"\n)\n</code></pre> <p>The maximum value of the metric.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.MetricAggregation.min","title":"min  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>min: Optional[float] = float_field(\n    2, optional=True, group=\"_min\"\n)\n</code></pre> <p>The minimum value of the metric.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.MetricAggregation.rated_bounds","title":"rated_bounds  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rated_bounds: Bounds = message_field(13)\n</code></pre> <p>The manufacturer's rated bounds of the metric. This may differ from <code>system_bounds</code> as it does not take into account the current state of the overall system.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.MetricAggregation.raw_values","title":"raw_values  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>raw_values: List[float] = float_field(12)\n</code></pre> <p>The array of all the metric values.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.MetricAggregation.system_exclusion_bounds","title":"system_exclusion_bounds  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>system_exclusion_bounds: Bounds = message_field(4)\n</code></pre> <p>These bounds indicate the range of values that are disallowed for the metric. If these bounds for a metric are [<code>lower</code>, <code>upper</code>], then this metric's <code>value</code> needs to comply with the constraints <code>value &lt;= lower</code> OR <code>upper &lt;= value</code>. It is important to note that these bounds work together with <code>system_inclusion_bounds</code>. E.g., for the system to accept a charge command, clients need to request power values within the bounds <code>[system_inclusion_bounds.lower, system_exclusion_bounds.lower]</code>. This means that clients can only request charge commands with power values that are within the <code>system_inclusion_bounds</code>, but not within <code>system_exclusion_bounds</code>. Similarly, for the system to accept a discharge command, clients need to request power values within the bounds <code>[system_exclusion_bounds.upper, system_inclusion_bounds.upper]</code>. The following diagram illustrates the relationship between the bounds. <code>inclusion.lower                              inclusion.upper &lt;-------|============|------------------|============|---------&gt; exclusion.lower    exclusion.upper</code> ---- values here are disallowed and wil be rejected ==== vales here are allowed and will be accepted</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.MetricAggregation.system_inclusion_bounds","title":"system_inclusion_bounds  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>system_inclusion_bounds: Bounds = message_field(5)\n</code></pre> <p>These bounds indicate the range of values that are allowed for the metric. If these bounds for a metric are [<code>lower</code>, <code>upper</code>], then this metric's <code>value</code> needs to comply with the constraint <code>lower &lt;= value &lt;= upper</code> It is important to note that these bounds work together with <code>system_exclusion_bounds</code>. E.g., for the system to accept a charge command, clients need to request power values within the bounds <code>[system_inclusion_bounds.lower, system_exclusion_bounds.lower]</code>. This means that clients can only request charge commands with power values that are within the <code>system_inclusion_bounds</code>, but not within <code>system_exclusion_bounds</code>. Similarly, for the system to accept a discharge command, clients need to request power values within the bounds <code>[system_exclusion_bounds.upper, system_inclusion_bounds.upper]</code>. The following diagram illustrates the relationship between the bounds. <code>inclusion.lower                              inclusion.upper &lt;-------|============|------------------|============|---------&gt; exclusion.lower    exclusion.upper</code> ---- values here are disallowed and wil be rejected ==== vales here are allowed and will be accepted</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/","title":"electrical","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical","title":"frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical-classes","title":"Classes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.Ac","title":"frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.Ac  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>The current state and metrics of the electrical connections to the inverter.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Ac(betterproto.Message):\n    \"\"\"\n    The current state and metrics of the electrical connections to the\n    inverter.\n    \"\"\"\n\n    frequency: \"__metrics__.Metric\" = betterproto.message_field(1)\n    \"\"\"The AC frequency. In Hertz (Hz).\"\"\"\n\n    current: \"__metrics__.Metric\" = betterproto.message_field(2)\n    \"\"\"\n    The apparent 3-phase AC current. Positive values represent apparent energy\n    flowing towards the grid connection, and vice versa. In Ampere (A).\n    \"\"\"\n\n    power_apparent: \"__metrics__.Metric\" = betterproto.message_field(3)\n    \"\"\"\n    The apparent 3-phase AC power. Positive values represent apparent energy\n    flowing towards the grid connection, and vice versa. In Volt-Ampere (VA).\n    \"\"\"\n\n    power_active: \"__metrics__.Metric\" = betterproto.message_field(4)\n    \"\"\"\n    The total active 3-phase AC active power. +ve power means consumption, away\n    from the grid. -ve power means supply into the grid. In Watt (W).\n    \"\"\"\n\n    power_reactive: \"__metrics__.Metric\" = betterproto.message_field(5)\n    \"\"\"\n    The reactive 3-phase AC power. +ve power means capacitive (current leading\n    w.r.t. voltage). -ve power means inductive (current lagging w.r.t.\n    voltage). In Volt-Ampere reactive (VAr).\n    \"\"\"\n\n    energy_apparent: \"__metrics__.Metric\" = betterproto.message_field(6)\n    \"\"\"\n    The total 3-phase apparent energy. A positive value represents the net\n    apparent energy supplied to the grid connection, and vice versa. In Volt-\n    Ampere-hour (VAh).\n    \"\"\"\n\n    energy_active: \"AcActiveEnergy\" = betterproto.message_field(7)\n    \"\"\"\n    The total 3-phase active energy counters for the underlying component's\n    consumption and supply. In Watt-hour (Wh).\n    \"\"\"\n\n    energy_reactive: \"AcReactiveEnergy\" = betterproto.message_field(8)\n    \"\"\"\n    The total 3-phase reactive energy counters for the underlying component's\n    capacitive and inductive energy values. In Volt-Ampere reactive hour\n    (VArh). FIXME: ReactiveEnergy says Volt-Ampere-hour (VAh).\n    \"\"\"\n\n    harmonics_power_active: \"AcHarmonics\" = betterproto.message_field(9)\n    \"\"\"\n    The sums of the harmonics of the instantaneous active power at the\n    component across all 3 phases.\n    \"\"\"\n\n    thd_power_active: float = betterproto.float_field(10)\n    \"\"\"\n    The sums of the total harmonic distortion of the instantaneous active power\n    at the component across all 3 phases.\n    \"\"\"\n\n    phase_1: \"AcAcPhase\" = betterproto.message_field(11)\n    \"\"\"AC metrics for phase/line 1.\"\"\"\n\n    phase_2: \"AcAcPhase\" = betterproto.message_field(12)\n    \"\"\"AC metrics for phase/line 2.\"\"\"\n\n    phase_3: \"AcAcPhase\" = betterproto.message_field(13)\n    \"\"\"AC metrics for phase/line 3.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.Ac-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.Ac.current","title":"current  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>current: Metric = message_field(2)\n</code></pre> <p>The apparent 3-phase AC current. Positive values represent apparent energy flowing towards the grid connection, and vice versa. In Ampere (A).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.Ac.energy_active","title":"energy_active  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>energy_active: AcActiveEnergy = message_field(7)\n</code></pre> <p>The total 3-phase active energy counters for the underlying component's consumption and supply. In Watt-hour (Wh).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.Ac.energy_apparent","title":"energy_apparent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>energy_apparent: Metric = message_field(6)\n</code></pre> <p>The total 3-phase apparent energy. A positive value represents the net apparent energy supplied to the grid connection, and vice versa. In Volt- Ampere-hour (VAh).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.Ac.energy_reactive","title":"energy_reactive  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>energy_reactive: AcReactiveEnergy = message_field(8)\n</code></pre> <p>The total 3-phase reactive energy counters for the underlying component's capacitive and inductive energy values. In Volt-Ampere reactive hour (VArh). FIXME: ReactiveEnergy says Volt-Ampere-hour (VAh).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.Ac.frequency","title":"frequency  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>frequency: Metric = message_field(1)\n</code></pre> <p>The AC frequency. In Hertz (Hz).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.Ac.harmonics_power_active","title":"harmonics_power_active  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>harmonics_power_active: AcHarmonics = message_field(9)\n</code></pre> <p>The sums of the harmonics of the instantaneous active power at the component across all 3 phases.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.Ac.phase_1","title":"phase_1  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>phase_1: AcAcPhase = message_field(11)\n</code></pre> <p>AC metrics for phase/line 1.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.Ac.phase_2","title":"phase_2  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>phase_2: AcAcPhase = message_field(12)\n</code></pre> <p>AC metrics for phase/line 2.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.Ac.phase_3","title":"phase_3  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>phase_3: AcAcPhase = message_field(13)\n</code></pre> <p>AC metrics for phase/line 3.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.Ac.power_active","title":"power_active  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>power_active: Metric = message_field(4)\n</code></pre> <p>The total active 3-phase AC active power. +ve power means consumption, away from the grid. -ve power means supply into the grid. In Watt (W).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.Ac.power_apparent","title":"power_apparent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>power_apparent: Metric = message_field(3)\n</code></pre> <p>The apparent 3-phase AC power. Positive values represent apparent energy flowing towards the grid connection, and vice versa. In Volt-Ampere (VA).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.Ac.power_reactive","title":"power_reactive  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>power_reactive: Metric = message_field(5)\n</code></pre> <p>The reactive 3-phase AC power. +ve power means capacitive (current leading w.r.t. voltage). -ve power means inductive (current lagging w.r.t. voltage). In Volt-Ampere reactive (VAr).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.Ac.thd_power_active","title":"thd_power_active  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>thd_power_active: float = float_field(10)\n</code></pre> <p>The sums of the total harmonic distortion of the instantaneous active power at the component across all 3 phases.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.AcAcPhase","title":"frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.AcAcPhase  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>AC metrics of a single phase.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass AcAcPhase(betterproto.Message):\n    \"\"\"AC metrics of a single phase.\"\"\"\n\n    voltage: \"__metrics__.Metric\" = betterproto.message_field(1)\n    \"\"\"The AC voltage between the line and the neutral wire. In Volt (V).\"\"\"\n\n    current: \"__metrics__.Metric\" = betterproto.message_field(2)\n    \"\"\"\n    AC current. +ve current means consumption, away from the grid. -ve current\n    means supply into the grid. In Ampere (A).\n    \"\"\"\n\n    power_active: \"__metrics__.Metric\" = betterproto.message_field(3)\n    \"\"\"\n    AC active power. +ve power means consumption, away from the grid. -ve power\n    means supply into the grid. In Watt (W).\n    \"\"\"\n\n    power_reactive: \"__metrics__.Metric\" = betterproto.message_field(4)\n    \"\"\"\n    AC reactive power. +ve power means inductive (leading). -ve power means\n    capacitive (lagging). In Volt-Ampere reactive (VAr).\n    \"\"\"\n\n    energy_apparent: \"__metrics__.Metric\" = betterproto.message_field(5)\n    \"\"\"\n    The total apparent energy. A Positive value represents the net apparent\n    energy supplied to the grid connection, and vice versa. In Volt-Ampere-hour\n    (VAh).\n    \"\"\"\n\n    energy_active: \"AcActiveEnergy\" = betterproto.message_field(6)\n    \"\"\"\n    The total active energy counters for the underlying component's consumption\n    and supply. In Watt-hour (Wh).\n    \"\"\"\n\n    energy_reactive: \"AcReactiveEnergy\" = betterproto.message_field(7)\n    \"\"\"\n    The total reactive energy counters for the underlying component's\n    capacitive and inductive energy values. In Volt-Ampere reactive hour\n    (VArh).\n    \"\"\"\n\n    harmonics_power_active: \"AcHarmonics\" = betterproto.message_field(8)\n    \"\"\"\n    Harmonics of the instantaneous active power at the component. In percent\n    (%).\n    \"\"\"\n\n    thd_power_active: float = betterproto.float_field(9)\n    \"\"\"\n    Total harmonic distortion of the instantaneous active power at the\n    component. In percent (%).\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.AcAcPhase-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.AcAcPhase.current","title":"current  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>current: Metric = message_field(2)\n</code></pre> <p>AC current. +ve current means consumption, away from the grid. -ve current means supply into the grid. In Ampere (A).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.AcAcPhase.energy_active","title":"energy_active  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>energy_active: AcActiveEnergy = message_field(6)\n</code></pre> <p>The total active energy counters for the underlying component's consumption and supply. In Watt-hour (Wh).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.AcAcPhase.energy_apparent","title":"energy_apparent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>energy_apparent: Metric = message_field(5)\n</code></pre> <p>The total apparent energy. A Positive value represents the net apparent energy supplied to the grid connection, and vice versa. In Volt-Ampere-hour (VAh).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.AcAcPhase.energy_reactive","title":"energy_reactive  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>energy_reactive: AcReactiveEnergy = message_field(7)\n</code></pre> <p>The total reactive energy counters for the underlying component's capacitive and inductive energy values. In Volt-Ampere reactive hour (VArh).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.AcAcPhase.harmonics_power_active","title":"harmonics_power_active  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>harmonics_power_active: AcHarmonics = message_field(8)\n</code></pre> <p>Harmonics of the instantaneous active power at the component. In percent (%).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.AcAcPhase.power_active","title":"power_active  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>power_active: Metric = message_field(3)\n</code></pre> <p>AC active power. +ve power means consumption, away from the grid. -ve power means supply into the grid. In Watt (W).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.AcAcPhase.power_reactive","title":"power_reactive  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>power_reactive: Metric = message_field(4)\n</code></pre> <p>AC reactive power. +ve power means inductive (leading). -ve power means capacitive (lagging). In Volt-Ampere reactive (VAr).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.AcAcPhase.thd_power_active","title":"thd_power_active  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>thd_power_active: float = float_field(9)\n</code></pre> <p>Total harmonic distortion of the instantaneous active power at the component. In percent (%).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.AcAcPhase.voltage","title":"voltage  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>voltage: Metric = message_field(1)\n</code></pre> <p>The AC voltage between the line and the neutral wire. In Volt (V).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.AcActiveEnergy","title":"frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.AcActiveEnergy  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>The active energy the inverter is consuming or generating.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass AcActiveEnergy(betterproto.Message):\n    \"\"\"The active energy the inverter is consuming or generating.\"\"\"\n\n    energy: \"__metrics__.Metric\" = betterproto.message_field(1)\n    \"\"\"\n    The sum of the consumed and delivered energy. This is a signed value in\n    passive sign convention: if more energy is consumed than delivered, this is\n    a -ve number, otherwise +ve. In Watt-hour (Wh).\n    \"\"\"\n\n    energy_consumed: \"__metrics__.Metric\" = betterproto.message_field(2)\n    \"\"\"The consumed energy. In Watt-hour (Wh).\"\"\"\n\n    energy_delivered: \"__metrics__.Metric\" = betterproto.message_field(3)\n    \"\"\"The delivered energy. In Watt-hour (Wh).\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.AcActiveEnergy-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.AcActiveEnergy.energy","title":"energy  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>energy: Metric = message_field(1)\n</code></pre> <p>The sum of the consumed and delivered energy. This is a signed value in passive sign convention: if more energy is consumed than delivered, this is a -ve number, otherwise +ve. In Watt-hour (Wh).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.AcActiveEnergy.energy_consumed","title":"energy_consumed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>energy_consumed: Metric = message_field(2)\n</code></pre> <p>The consumed energy. In Watt-hour (Wh).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.AcActiveEnergy.energy_delivered","title":"energy_delivered  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>energy_delivered: Metric = message_field(3)\n</code></pre> <p>The delivered energy. In Watt-hour (Wh).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.AcHarmonics","title":"frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.AcHarmonics  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>The harmonics of the fast Fourier transform of the instantaneous values and its total harmonic distortion. In percent (%).</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass AcHarmonics(betterproto.Message):\n    \"\"\"\n    The harmonics of the fast Fourier transform of the instantaneous values and\n    its total harmonic distortion. In percent (%).\n    \"\"\"\n\n    harmonic_1: float = betterproto.float_field(1)\n    harmonic_2: float = betterproto.float_field(2)\n    harmonic_3: float = betterproto.float_field(3)\n    harmonic_4: float = betterproto.float_field(4)\n    harmonic_5: float = betterproto.float_field(5)\n    harmonic_6: float = betterproto.float_field(6)\n    harmonic_7: float = betterproto.float_field(7)\n    harmonic_8: float = betterproto.float_field(8)\n    harmonic_9: float = betterproto.float_field(9)\n    harmonic_10: float = betterproto.float_field(10)\n    harmonic_11: float = betterproto.float_field(11)\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.AcReactiveEnergy","title":"frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.AcReactiveEnergy  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>The reactive energy the inverter is consuming or generating.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass AcReactiveEnergy(betterproto.Message):\n    \"\"\"The reactive energy the inverter is consuming or generating.\"\"\"\n\n    energy: \"__metrics__.Metric\" = betterproto.message_field(1)\n    \"\"\"\n    The sum of the capacitive and inductive energy. This is a signed value. If\n    more energy is capacitive than inductive, this is a -ve number, otherwise\n    +ve. In Volt-Ampere-hour (VArh).\n    \"\"\"\n\n    energy_capacitive: \"__metrics__.Metric\" = betterproto.message_field(2)\n    \"\"\"The capacitive energy. In Volt-Ampere-hour (VArh).\"\"\"\n\n    energy_inductive: \"__metrics__.Metric\" = betterproto.message_field(3)\n    \"\"\"The inductive energy. In Volt-Ampere-hour (VArh).\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.AcReactiveEnergy-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.AcReactiveEnergy.energy","title":"energy  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>energy: Metric = message_field(1)\n</code></pre> <p>The sum of the capacitive and inductive energy. This is a signed value. If more energy is capacitive than inductive, this is a -ve number, otherwise +ve. In Volt-Ampere-hour (VArh).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.AcReactiveEnergy.energy_capacitive","title":"energy_capacitive  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>energy_capacitive: Metric = message_field(2)\n</code></pre> <p>The capacitive energy. In Volt-Ampere-hour (VArh).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.AcReactiveEnergy.energy_inductive","title":"energy_inductive  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>energy_inductive: Metric = message_field(3)\n</code></pre> <p>The inductive energy. In Volt-Ampere-hour (VArh).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.Dc","title":"frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.Dc  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Metrics of a DC electrical connection.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Dc(betterproto.Message):\n    \"\"\"Metrics of a DC electrical connection.\"\"\"\n\n    voltage: \"__metrics__.Metric\" = betterproto.message_field(1)\n    \"\"\"The DC voltage across the component. In Volt (V).\"\"\"\n\n    current: \"__metrics__.Metric\" = betterproto.message_field(2)\n    \"\"\"\n    The DC current flowing away from the grid connection. In passive sign\n    convention: +ve current means consumption, away from the grid. -ve current\n    means supply into the grid. In Ampere (A).\n    \"\"\"\n\n    power: \"__metrics__.Metric\" = betterproto.message_field(3)\n    \"\"\"\n    The DC power flowing away from the grid connection. In passive sign\n    convention: +ve power means consumption, away from the grid. -ve power\n    means supply into the grid. In Watt (W).\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.Dc-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.Dc.current","title":"current  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>current: Metric = message_field(2)\n</code></pre> <p>The DC current flowing away from the grid connection. In passive sign convention: +ve current means consumption, away from the grid. -ve current means supply into the grid. In Ampere (A).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.Dc.power","title":"power  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>power: Metric = message_field(3)\n</code></pre> <p>The DC power flowing away from the grid connection. In passive sign convention: +ve power means consumption, away from the grid. -ve power means supply into the grid. In Watt (W).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/common/metrics/electrical/#frequenz.microgrid.betterproto.frequenz.api.common.metrics.electrical.Dc.voltage","title":"voltage  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>voltage: Metric = message_field(1)\n</code></pre> <p>The DC voltage across the component. In Volt (V).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/","title":"Index","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid-classes","title":"Classes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.Component","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.Component  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>A generic message for components. It is used to represent any category of component, with its static parameters.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Component(betterproto.Message):\n    \"\"\"\n    A generic message for components. It is used to represent any category of\n    component, with its static parameters.\n    \"\"\"\n\n    id: int = betterproto.uint64_field(1)\n    \"\"\"A unique identifier for the component.\"\"\"\n\n    name: str = betterproto.string_field(2)\n    \"\"\"An optional name for the component.\"\"\"\n\n    category: \"_common_components__.ComponentCategory\" = betterproto.enum_field(3)\n    \"\"\"The category of the component.\"\"\"\n\n    manufacturer: str = betterproto.string_field(4)\n    \"\"\"The component manufacturer.\"\"\"\n\n    model_name: str = betterproto.string_field(5)\n    \"\"\"The model name of the component.\"\"\"\n\n    grid: \"grid.Metadata\" = betterproto.message_field(11, group=\"metadata\")\n    battery: \"battery.Metadata\" = betterproto.message_field(12, group=\"metadata\")\n    inverter: \"inverter.Metadata\" = betterproto.message_field(13, group=\"metadata\")\n    meter: \"meter.Metadata\" = betterproto.message_field(14, group=\"metadata\")\n    ev_charger: \"ev_charger.Metadata\" = betterproto.message_field(15, group=\"metadata\")\n    sensor: \"sensor.Metadata\" = betterproto.message_field(16, group=\"metadata\")\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.Component-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.Component.category","title":"category  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>category: ComponentCategory = enum_field(3)\n</code></pre> <p>The category of the component.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.Component.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id: int = uint64_field(1)\n</code></pre> <p>A unique identifier for the component.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.Component.manufacturer","title":"manufacturer  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>manufacturer: str = string_field(4)\n</code></pre> <p>The component manufacturer.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.Component.model_name","title":"model_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_name: str = string_field(5)\n</code></pre> <p>The model name of the component.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.Component.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = string_field(2)\n</code></pre> <p>An optional name for the component.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ComponentData","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.ComponentData  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>A generic container for data that can originate from any component type.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass ComponentData(betterproto.Message):\n    \"\"\"\n    A generic container for data that can originate from any component type.\n    \"\"\"\n\n    ts: datetime = betterproto.message_field(1)\n    \"\"\"The timestamp of when the data was measured.\"\"\"\n\n    id: int = betterproto.uint64_field(2)\n    \"\"\"The component ID.\"\"\"\n\n    meter: \"meter.Meter\" = betterproto.message_field(3, group=\"data\")\n    inverter: \"inverter.Inverter\" = betterproto.message_field(4, group=\"data\")\n    battery: \"battery.Battery\" = betterproto.message_field(5, group=\"data\")\n    ev_charger: \"ev_charger.EvCharger\" = betterproto.message_field(6, group=\"data\")\n    sensor: \"sensor.Sensor\" = betterproto.message_field(7, group=\"data\")\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ComponentData-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ComponentData.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id: int = uint64_field(2)\n</code></pre> <p>The component ID.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ComponentData.ts","title":"ts  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ts: datetime = message_field(1)\n</code></pre> <p>The timestamp of when the data was measured.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ComponentFilter","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.ComponentFilter  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Parameters for filtering the components.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass ComponentFilter(betterproto.Message):\n    \"\"\"Parameters for filtering the components.\"\"\"\n\n    ids: List[int] = betterproto.uint64_field(1)\n    \"\"\"Return components that have the specified IDs only.\"\"\"\n\n    categories: List[\"_common_components__.ComponentCategory\"] = betterproto.enum_field(\n        2\n    )\n    \"\"\"Return components that have the specified categories only.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ComponentFilter-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ComponentFilter.categories","title":"categories  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>categories: List[ComponentCategory] = enum_field(2)\n</code></pre> <p>Return components that have the specified categories only.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ComponentFilter.ids","title":"ids  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ids: List[int] = uint64_field(1)\n</code></pre> <p>Return components that have the specified IDs only.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ComponentIdParam","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.ComponentIdParam  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Encapsulation of a component ID, intended to be used as a parameter for rpc methods.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass ComponentIdParam(betterproto.Message):\n    \"\"\"\n    Encapsulation of a component ID, intended to be used as a parameter for rpc\n    methods.\n    \"\"\"\n\n    id: int = betterproto.uint64_field(1)\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ComponentList","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.ComponentList  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>A message containing a list of components, used as a return typ in certain RPC methods.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass ComponentList(betterproto.Message):\n    \"\"\"\n    A message containing a list of components, used as a return typ in certain\n    RPC methods.\n    \"\"\"\n\n    components: List[\"Component\"] = betterproto.message_field(1)\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.Connection","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.Connection  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Describes a single connection between components of the microgrid, with direction away from the grid endpoint, meaning it is aligned with positive current according to the passive sign convention: https://en.wikipedia.org/wiki/Passive_sign_convention</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Connection(betterproto.Message):\n    \"\"\"\n    Describes a single connection between components of the microgrid, with\n    direction away from the grid endpoint, meaning it is aligned with positive\n    current according to the passive sign convention:\n    https://en.wikipedia.org/wiki/Passive_sign_convention\n    \"\"\"\n\n    start: int = betterproto.uint64_field(1)\n    \"\"\"`id` of the component the connection starts from\"\"\"\n\n    end: int = betterproto.uint64_field(2)\n    \"\"\"`id` of the component the connection points to\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.Connection-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.Connection.end","title":"end  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>end: int = uint64_field(2)\n</code></pre> <p><code>id</code> of the component the connection points to</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.Connection.start","title":"start  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>start: int = uint64_field(1)\n</code></pre> <p><code>id</code> of the component the connection starts from</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ConnectionFilter","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.ConnectionFilter  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Parameters for filtering the component connections</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass ConnectionFilter(betterproto.Message):\n    \"\"\"Parameters for filtering the component connections\"\"\"\n\n    starts: List[int] = betterproto.uint64_field(1)\n    \"\"\"\n    Only return connections that start from the specified component ID(s): if\n    empty, connections with any `start` will be returned\n    \"\"\"\n\n    ends: List[int] = betterproto.uint64_field(2)\n    \"\"\"\n    Only return connections that end at the specified component ID(s): if\n    empty, connections with any `end` will be returned\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ConnectionFilter-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ConnectionFilter.ends","title":"ends  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ends: List[int] = uint64_field(2)\n</code></pre> <p>Only return connections that end at the specified component ID(s): if empty, connections with any <code>end</code> will be returned</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ConnectionFilter.starts","title":"starts  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>starts: List[int] = uint64_field(1)\n</code></pre> <p>Only return connections that start from the specified component ID(s): if empty, connections with any <code>start</code> will be returned</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ConnectionList","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.ConnectionList  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>List of connections between components</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass ConnectionList(betterproto.Message):\n    \"\"\"List of connections between components\"\"\"\n\n    connections: List[\"Connection\"] = betterproto.message_field(1)\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.Location","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.Location  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>A pair of geographical co-ordinates, representing the location of a place.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Location(betterproto.Message):\n    \"\"\"\n    A pair of geographical co-ordinates, representing the location of a place.\n    \"\"\"\n\n    latitude: float = betterproto.float_field(1)\n    \"\"\"The latitude of the place.\"\"\"\n\n    longitude: float = betterproto.float_field(2)\n    \"\"\"The longitude of the place.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.Location-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.Location.latitude","title":"latitude  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>latitude: float = float_field(1)\n</code></pre> <p>The latitude of the place.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.Location.longitude","title":"longitude  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>longitude: float = float_field(2)\n</code></pre> <p>The longitude of the place.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.MicrogridMetadata","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.MicrogridMetadata  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Metadata that describes a microgrid.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass MicrogridMetadata(betterproto.Message):\n    \"\"\"Metadata that describes a microgrid.\"\"\"\n\n    microgrid_id: int = betterproto.uint64_field(1)\n    \"\"\"\n    The microgrid ID. This is a natural number that uniquely identifies a given\n    microgrid.\n    \"\"\"\n\n    location: \"Location\" = betterproto.message_field(2)\n    \"\"\"The location of the microgrid, in geographical co-ordinates.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.MicrogridMetadata-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.MicrogridMetadata.location","title":"location  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>location: Location = message_field(2)\n</code></pre> <p>The location of the microgrid, in geographical co-ordinates.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.MicrogridMetadata.microgrid_id","title":"microgrid_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>microgrid_id: int = uint64_field(1)\n</code></pre> <p>The microgrid ID. This is a natural number that uniquely identifies a given microgrid.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.PowerLevelParam","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.PowerLevelParam  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Parameters for setting the charge/discharge power of an appropriate component.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass PowerLevelParam(betterproto.Message):\n    \"\"\"\n    Parameters for setting the charge/discharge power of an appropriate\n    component.\n    \"\"\"\n\n    component_id: int = betterproto.uint64_field(1)\n    \"\"\"The ID of the component to set the output power of.\"\"\"\n\n    power_w: int = betterproto.uint64_field(2)\n    \"\"\"\n    The output power level, in watts. This is always a +ve integer. The sign of\n    the power level is controlled by the implementations of the `Charge` and\n    `Discharge` RPC methods.\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.PowerLevelParam-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.PowerLevelParam.component_id","title":"component_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>component_id: int = uint64_field(1)\n</code></pre> <p>The ID of the component to set the output power of.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.PowerLevelParam.power_w","title":"power_w  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>power_w: int = uint64_field(2)\n</code></pre> <p>The output power level, in watts. This is always a +ve integer. The sign of the power level is controlled by the implementations of the <code>Charge</code> and <code>Discharge</code> RPC methods.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.SetBoundsParam","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.SetBoundsParam  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Parameters for setting bounds of a given metric of a given component.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass SetBoundsParam(betterproto.Message):\n    \"\"\"\n    Parameters for setting bounds of a given metric of a given component.\n    \"\"\"\n\n    component_id: int = betterproto.uint64_field(1)\n    \"\"\"The ID of the target component.\"\"\"\n\n    target_metric: \"SetBoundsParamTargetMetric\" = betterproto.enum_field(2)\n    \"\"\"The target metric whose bounds have to be set.\"\"\"\n\n    bounds: \"_common_metrics__.Bounds\" = betterproto.message_field(3)\n    \"\"\"The bounds for the target metric.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.SetBoundsParam-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.SetBoundsParam.bounds","title":"bounds  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bounds: Bounds = message_field(3)\n</code></pre> <p>The bounds for the target metric.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.SetBoundsParam.component_id","title":"component_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>component_id: int = uint64_field(1)\n</code></pre> <p>The ID of the target component.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.SetBoundsParam.target_metric","title":"target_metric  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>target_metric: SetBoundsParamTargetMetric = enum_field(2)\n</code></pre> <p>The target metric whose bounds have to be set.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.SetBoundsParamTargetMetric","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.SetBoundsParamTargetMetric","text":"<p>             Bases: <code>Enum</code></p> <p>An enumerated list of metrics whose bounds can be set.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/__init__.py</code> <pre><code>class SetBoundsParamTargetMetric(betterproto.Enum):\n    \"\"\"An enumerated list of metrics whose bounds can be set.\"\"\"\n\n    TARGET_METRIC_UNSPECIFIED = 0\n    TARGET_METRIC_POWER_ACTIVE = 1\n    TARGET_METRIC_CURRENT = 2\n    TARGET_METRIC_CURRENT_PHASE_1 = 3\n    TARGET_METRIC_CURRENT_PHASE_2 = 4\n    TARGET_METRIC_CURRENT_PHASE_3 = 5\n    TARGET_METRIC_POWER_REACTIVE = 6\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.SetPowerActiveParam","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.SetPowerActiveParam  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Parameters for setting the active power of an appropriate component using the <code>SetPowerActive</code> RPC.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass SetPowerActiveParam(betterproto.Message):\n    \"\"\"\n    Parameters for setting the active power of an appropriate component using\n    the `SetPowerActive` RPC.\n    \"\"\"\n\n    component_id: int = betterproto.uint64_field(1)\n    \"\"\"The ID of the component to set the output active power of.\"\"\"\n\n    power: float = betterproto.float_field(2)\n    \"\"\"\n    The output active power level, in watts. -ve values are for discharging,\n    and +ve values are for charging.\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.SetPowerActiveParam-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.SetPowerActiveParam.component_id","title":"component_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>component_id: int = uint64_field(1)\n</code></pre> <p>The ID of the component to set the output active power of.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.SetPowerActiveParam.power","title":"power  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>power: float = float_field(2)\n</code></pre> <p>The output active power level, in watts. -ve values are for discharging, and +ve values are for charging.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.SetPowerReactiveParam","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.SetPowerReactiveParam  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Parameters for setting the reactive power of an appropriate component using the <code>SetPowerReactive</code> RPC.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass SetPowerReactiveParam(betterproto.Message):\n    \"\"\"\n    Parameters for setting the reactive power of an appropriate component using\n    the `SetPowerReactive` RPC.\n    \"\"\"\n\n    component_id: int = betterproto.uint64_field(1)\n    \"\"\"The ID of the component to set the output reactive power of.\"\"\"\n\n    power: float = betterproto.float_field(2)\n    \"\"\"\n    The output reactive power level, in VAr. -ve values are for inductive\n    (lagging) power , and +ve values are for  capacitive (leading) power.\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.SetPowerReactiveParam-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.SetPowerReactiveParam.component_id","title":"component_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>component_id: int = uint64_field(1)\n</code></pre> <p>The ID of the component to set the output reactive power of.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.SetPowerReactiveParam.power","title":"power  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>power: float = float_field(2)\n</code></pre> <p>The output reactive power level, in VAr. -ve values are for inductive (lagging) power , and +ve values are for  capacitive (leading) power.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/","title":"battery","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.battery","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery-classes","title":"Classes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Battery","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Battery  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Battery/BMS details</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Battery(betterproto.Message):\n    \"\"\"Battery/BMS details\"\"\"\n\n    properties: \"Properties\" = betterproto.message_field(1)\n    \"\"\"The component properties\"\"\"\n\n    state: \"State\" = betterproto.message_field(2)\n    \"\"\"The battery state.\"\"\"\n\n    errors: List[\"Error\"] = betterproto.message_field(3)\n    \"\"\"\n    A list of errors encountered the component. An empty list implies no error.\n    \"\"\"\n\n    data: \"Data\" = betterproto.message_field(4)\n    \"\"\"A Battery data object.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Battery-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Battery.data","title":"data  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>data: Data = message_field(4)\n</code></pre> <p>A Battery data object.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Battery.errors","title":"errors  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>errors: List[Error] = message_field(3)\n</code></pre> <p>A list of errors encountered the component. An empty list implies no error.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Battery.properties","title":"properties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>properties: Properties = message_field(1)\n</code></pre> <p>The component properties</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Battery.state","title":"state  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>state: State = message_field(2)\n</code></pre> <p>The battery state.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ComponentState","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ComponentState","text":"<p>             Bases: <code>Enum</code></p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/__init__.py</code> <pre><code>class ComponentState(betterproto.Enum):\n    COMPONENT_STATE_UNSPECIFIED = 0\n    \"\"\"\n    Default value. This value is used only when the state information is not\n    available.\n    \"\"\"\n\n    COMPONENT_STATE_OFF = 1\n    \"\"\"The battery is switched off.\"\"\"\n\n    COMPONENT_STATE_IDLE = 2\n    \"\"\"The battery is idle.\"\"\"\n\n    COMPONENT_STATE_CHARGING = 3\n    \"\"\"The battery is consuming electrical energy.\"\"\"\n\n    COMPONENT_STATE_DISCHARGING = 4\n    \"\"\"The battery is generating electrical energy.\"\"\"\n\n    COMPONENT_STATE_ERROR = 5\n    \"\"\"The battery is in a faulty state.\"\"\"\n\n    COMPONENT_STATE_LOCKED = 6\n    \"\"\"\n    The battery is online, but currently unavailable, possibly due to a pre-\n    scheduled maintenance, or waiting for a resource to be loaded.\n    \"\"\"\n\n    COMPONENT_STATE_SWITCHING_ON = 7\n    \"\"\"\n    The battery is starting up and needs some time to become fully operational.\n    \"\"\"\n\n    COMPONENT_STATE_SWITCHING_OFF = 8\n    \"\"\"The battery is switching off and needs some time to fully shut down.\"\"\"\n\n    COMPONENT_STATE_UNKNOWN = 9\n    \"\"\"\n    The state is provided by the device, but it can not be parsed as any of the\n    above (known) states.\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ComponentState-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ComponentState.COMPONENT_STATE_CHARGING","title":"COMPONENT_STATE_CHARGING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_CHARGING = 3\n</code></pre> <p>The battery is consuming electrical energy.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ComponentState.COMPONENT_STATE_DISCHARGING","title":"COMPONENT_STATE_DISCHARGING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_DISCHARGING = 4\n</code></pre> <p>The battery is generating electrical energy.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ComponentState.COMPONENT_STATE_ERROR","title":"COMPONENT_STATE_ERROR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_ERROR = 5\n</code></pre> <p>The battery is in a faulty state.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ComponentState.COMPONENT_STATE_IDLE","title":"COMPONENT_STATE_IDLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_IDLE = 2\n</code></pre> <p>The battery is idle.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ComponentState.COMPONENT_STATE_LOCKED","title":"COMPONENT_STATE_LOCKED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_LOCKED = 6\n</code></pre> <p>The battery is online, but currently unavailable, possibly due to a pre- scheduled maintenance, or waiting for a resource to be loaded.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ComponentState.COMPONENT_STATE_OFF","title":"COMPONENT_STATE_OFF  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_OFF = 1\n</code></pre> <p>The battery is switched off.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ComponentState.COMPONENT_STATE_SWITCHING_OFF","title":"COMPONENT_STATE_SWITCHING_OFF  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_SWITCHING_OFF = 8\n</code></pre> <p>The battery is switching off and needs some time to fully shut down.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ComponentState.COMPONENT_STATE_SWITCHING_ON","title":"COMPONENT_STATE_SWITCHING_ON  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_SWITCHING_ON = 7\n</code></pre> <p>The battery is starting up and needs some time to become fully operational.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ComponentState.COMPONENT_STATE_UNKNOWN","title":"COMPONENT_STATE_UNKNOWN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_UNKNOWN = 9\n</code></pre> <p>The state is provided by the device, but it can not be parsed as any of the above (known) states.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ComponentState.COMPONENT_STATE_UNSPECIFIED","title":"COMPONENT_STATE_UNSPECIFIED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_UNSPECIFIED = 0\n</code></pre> <p>Default value. This value is used only when the state information is not available.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Data","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Data  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Battery data.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Data(betterproto.Message):\n    \"\"\"Battery data.\"\"\"\n\n    dc: \"__common_metrics_electrical__.Dc\" = betterproto.message_field(1)\n    \"\"\"DC electricity metrics.\"\"\"\n\n    soc: \"__common_metrics__.MetricAggregation\" = betterproto.message_field(2)\n    \"\"\"Battery's overall SoC. In percent (%).\"\"\"\n\n    temperature: \"__common_metrics__.MetricAggregation\" = betterproto.message_field(3)\n    \"\"\"\n    The aggregated values of all the temperature measurements of a battery. In\n    degree Celsius (\u00b0C).\n    \"\"\"\n\n    humidity: \"__common_metrics__.MetricAggregation\" = betterproto.message_field(4)\n    \"\"\"\n    The aggregated values of all the humidity measurements of a battery. In\n    percent (%).\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Data-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Data.dc","title":"dc  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dc: Dc = message_field(1)\n</code></pre> <p>DC electricity metrics.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Data.humidity","title":"humidity  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>humidity: MetricAggregation = message_field(4)\n</code></pre> <p>The aggregated values of all the humidity measurements of a battery. In percent (%).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Data.soc","title":"soc  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>soc: MetricAggregation = message_field(2)\n</code></pre> <p>Battery's overall SoC. In percent (%).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Data.temperature","title":"temperature  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>temperature: MetricAggregation = message_field(3)\n</code></pre> <p>The aggregated values of all the temperature measurements of a battery. In degree Celsius (\u00b0C).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Error","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Error  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Error message.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Error(betterproto.Message):\n    \"\"\"Error message.\"\"\"\n\n    code: \"ErrorCode\" = betterproto.enum_field(1)\n    \"\"\"The error code.\"\"\"\n\n    level: \"_common__.ErrorLevel\" = betterproto.enum_field(2)\n    \"\"\"The error severity level.\"\"\"\n\n    msg: str = betterproto.string_field(3)\n    \"\"\"The error message.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Error-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Error.code","title":"code  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>code: ErrorCode = enum_field(1)\n</code></pre> <p>The error code.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Error.level","title":"level  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>level: ErrorLevel = enum_field(2)\n</code></pre> <p>The error severity level.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Error.msg","title":"msg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>msg: str = string_field(3)\n</code></pre> <p>The error message.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ErrorCode","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ErrorCode","text":"<p>             Bases: <code>Enum</code></p> <p>Enumerated Battery/BMS error codes.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/__init__.py</code> <pre><code>class ErrorCode(betterproto.Enum):\n    \"\"\"Enumerated Battery/BMS error codes.\"\"\"\n\n    ERROR_CODE_UNSPECIFIED = 0\n    \"\"\"Unspecified.\"\"\"\n\n    ERROR_CODE_HIGH_CURRENT_CHARGE = 1\n    \"\"\"Charge current is too high.\"\"\"\n\n    ERROR_CODE_HIGH_CURRENT_DISCHARGE = 2\n    \"\"\"Discharge current is too high.\"\"\"\n\n    ERROR_CODE_HIGH_VOLTAGE = 3\n    \"\"\"Voltage is too high.\"\"\"\n\n    ERROR_CODE_LOW_VOLTAGE = 4\n    \"\"\"Voltage is too low.\"\"\"\n\n    ERROR_CODE_HIGH_TEMPERATURE = 5\n    \"\"\"Temperature is too high.\"\"\"\n\n    ERROR_CODE_LOW_TEMPERATURE = 6\n    \"\"\"Temperature is too low.\"\"\"\n\n    ERROR_CODE_HIGH_HUMIDITY = 7\n    \"\"\"Humidity is too high.\"\"\"\n\n    ERROR_CODE_EXCEEDED_SOP_CHARGE = 8\n    \"\"\"Charge current has exceeded component bounds.\"\"\"\n\n    ERROR_CODE_EXCEEDED_SOP_DISCHARGE = 9\n    \"\"\"Discharge current has exceeded component bounds.\"\"\"\n\n    ERROR_CODE_SYSTEM_IMBALANCE = 10\n    \"\"\"The battery blocks are not balanced with respect to each other.\"\"\"\n\n    ERROR_CODE_LOW_SOH = 11\n    \"\"\"The State of health is low.\"\"\"\n\n    ERROR_CODE_BLOCK_ERROR = 12\n    \"\"\"One or more battery blocks have failed.\"\"\"\n\n    ERROR_CODE_CONTROLLER_ERROR = 13\n    \"\"\"The battery controller has failed.\"\"\"\n\n    ERROR_CODE_RELAY_ERROR = 14\n    \"\"\"The battery's DC relays have failed.\"\"\"\n\n    ERROR_CODE_RELAY_CYCLE_LIMIT_REACHED = 15\n    \"\"\"\n    The battery's DC relays have been cycled for the maximum number of times\n    mentioned in their lifetime specifications.\n    \"\"\"\n\n    ERROR_CODE_FUSE_ERROR = 16\n    \"\"\"The battery's fuse has failed.\"\"\"\n\n    ERROR_CODE_EXTERNAL_POWER_SWITCH_ERROR = 17\n    \"\"\"The eternal power switch has failed.\"\"\"\n\n    ERROR_CODE_PRECHARGE_ERROR = 18\n    \"\"\"The precharge operation has failed.\"\"\"\n\n    ERROR_CODE_SYSTEM_PLAUSIBILITY_ERROR = 19\n    \"\"\"System plausibility checks have failed.\"\"\"\n\n    ERROR_CODE_SYSTEM_UNDERVOLTAGE_SHUTDOWN = 20\n    \"\"\"System shut down due to extremely low voltage.\"\"\"\n\n    ERROR_CODE_CALIBRATION_NEEDED = 21\n    \"\"\"The battery requires a calibration to reset its measurements.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ErrorCode-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ErrorCode.ERROR_CODE_BLOCK_ERROR","title":"ERROR_CODE_BLOCK_ERROR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_BLOCK_ERROR = 12\n</code></pre> <p>One or more battery blocks have failed.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ErrorCode.ERROR_CODE_CALIBRATION_NEEDED","title":"ERROR_CODE_CALIBRATION_NEEDED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_CALIBRATION_NEEDED = 21\n</code></pre> <p>The battery requires a calibration to reset its measurements.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ErrorCode.ERROR_CODE_CONTROLLER_ERROR","title":"ERROR_CODE_CONTROLLER_ERROR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_CONTROLLER_ERROR = 13\n</code></pre> <p>The battery controller has failed.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ErrorCode.ERROR_CODE_EXCEEDED_SOP_CHARGE","title":"ERROR_CODE_EXCEEDED_SOP_CHARGE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_EXCEEDED_SOP_CHARGE = 8\n</code></pre> <p>Charge current has exceeded component bounds.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ErrorCode.ERROR_CODE_EXCEEDED_SOP_DISCHARGE","title":"ERROR_CODE_EXCEEDED_SOP_DISCHARGE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_EXCEEDED_SOP_DISCHARGE = 9\n</code></pre> <p>Discharge current has exceeded component bounds.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ErrorCode.ERROR_CODE_EXTERNAL_POWER_SWITCH_ERROR","title":"ERROR_CODE_EXTERNAL_POWER_SWITCH_ERROR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_EXTERNAL_POWER_SWITCH_ERROR = 17\n</code></pre> <p>The eternal power switch has failed.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ErrorCode.ERROR_CODE_FUSE_ERROR","title":"ERROR_CODE_FUSE_ERROR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_FUSE_ERROR = 16\n</code></pre> <p>The battery's fuse has failed.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ErrorCode.ERROR_CODE_HIGH_CURRENT_CHARGE","title":"ERROR_CODE_HIGH_CURRENT_CHARGE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_HIGH_CURRENT_CHARGE = 1\n</code></pre> <p>Charge current is too high.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ErrorCode.ERROR_CODE_HIGH_CURRENT_DISCHARGE","title":"ERROR_CODE_HIGH_CURRENT_DISCHARGE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_HIGH_CURRENT_DISCHARGE = 2\n</code></pre> <p>Discharge current is too high.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ErrorCode.ERROR_CODE_HIGH_HUMIDITY","title":"ERROR_CODE_HIGH_HUMIDITY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_HIGH_HUMIDITY = 7\n</code></pre> <p>Humidity is too high.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ErrorCode.ERROR_CODE_HIGH_TEMPERATURE","title":"ERROR_CODE_HIGH_TEMPERATURE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_HIGH_TEMPERATURE = 5\n</code></pre> <p>Temperature is too high.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ErrorCode.ERROR_CODE_HIGH_VOLTAGE","title":"ERROR_CODE_HIGH_VOLTAGE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_HIGH_VOLTAGE = 3\n</code></pre> <p>Voltage is too high.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ErrorCode.ERROR_CODE_LOW_SOH","title":"ERROR_CODE_LOW_SOH  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_LOW_SOH = 11\n</code></pre> <p>The State of health is low.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ErrorCode.ERROR_CODE_LOW_TEMPERATURE","title":"ERROR_CODE_LOW_TEMPERATURE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_LOW_TEMPERATURE = 6\n</code></pre> <p>Temperature is too low.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ErrorCode.ERROR_CODE_LOW_VOLTAGE","title":"ERROR_CODE_LOW_VOLTAGE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_LOW_VOLTAGE = 4\n</code></pre> <p>Voltage is too low.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ErrorCode.ERROR_CODE_PRECHARGE_ERROR","title":"ERROR_CODE_PRECHARGE_ERROR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_PRECHARGE_ERROR = 18\n</code></pre> <p>The precharge operation has failed.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ErrorCode.ERROR_CODE_RELAY_CYCLE_LIMIT_REACHED","title":"ERROR_CODE_RELAY_CYCLE_LIMIT_REACHED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_RELAY_CYCLE_LIMIT_REACHED = 15\n</code></pre> <p>The battery's DC relays have been cycled for the maximum number of times mentioned in their lifetime specifications.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ErrorCode.ERROR_CODE_RELAY_ERROR","title":"ERROR_CODE_RELAY_ERROR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_RELAY_ERROR = 14\n</code></pre> <p>The battery's DC relays have failed.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ErrorCode.ERROR_CODE_SYSTEM_IMBALANCE","title":"ERROR_CODE_SYSTEM_IMBALANCE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_SYSTEM_IMBALANCE = 10\n</code></pre> <p>The battery blocks are not balanced with respect to each other.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ErrorCode.ERROR_CODE_SYSTEM_PLAUSIBILITY_ERROR","title":"ERROR_CODE_SYSTEM_PLAUSIBILITY_ERROR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_SYSTEM_PLAUSIBILITY_ERROR = 19\n</code></pre> <p>System plausibility checks have failed.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ErrorCode.ERROR_CODE_SYSTEM_UNDERVOLTAGE_SHUTDOWN","title":"ERROR_CODE_SYSTEM_UNDERVOLTAGE_SHUTDOWN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_SYSTEM_UNDERVOLTAGE_SHUTDOWN = 20\n</code></pre> <p>System shut down due to extremely low voltage.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.ErrorCode.ERROR_CODE_UNSPECIFIED","title":"ERROR_CODE_UNSPECIFIED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_UNSPECIFIED = 0\n</code></pre> <p>Unspecified.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Metadata","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Metadata  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>The battery metadata.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Metadata(betterproto.Message):\n    \"\"\"The battery metadata.\"\"\"\n\n    type: \"__common_components__.BatteryType\" = betterproto.enum_field(1)\n    \"\"\"The battery type.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Metadata-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Metadata.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: BatteryType = enum_field(1)\n</code></pre> <p>The battery type.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Properties","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Properties  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Battery properties.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Properties(betterproto.Message):\n    \"\"\"Battery properties.\"\"\"\n\n    firmware_ver: str = betterproto.string_field(1)\n    \"\"\"The firmware version of the battery.\"\"\"\n\n    capacity: float = betterproto.float_field(2)\n    \"\"\"The capacity of the battery. In Watt-hour (Wh).\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Properties-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Properties.capacity","title":"capacity  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>capacity: float = float_field(2)\n</code></pre> <p>The capacity of the battery. In Watt-hour (Wh).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.Properties.firmware_ver","title":"firmware_ver  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>firmware_ver: str = string_field(1)\n</code></pre> <p>The firmware version of the battery.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.RelayState","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.RelayState","text":"<p>             Bases: <code>Enum</code></p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/__init__.py</code> <pre><code>class RelayState(betterproto.Enum):\n    RELAY_STATE_UNSPECIFIED = 0\n    \"\"\"Default value.\"\"\"\n\n    RELAY_STATE_OPENED = 1\n    \"\"\"\n    The relays are open, and the DC power line to the inverter is disconnected.\n    \"\"\"\n\n    RELAY_STATE_PRECHARGING = 2\n    \"\"\"\n    The relays are closing, and the DC power line to the inverter is being\n    connected.\n    \"\"\"\n\n    RELAY_STATE_CLOSED = 3\n    \"\"\"\n    The relays are closed, and the DC power line to the inverter is connected.\n    \"\"\"\n\n    RELAY_STATE_ERROR = 4\n    \"\"\"The relays are in an error state.\"\"\"\n\n    RELAY_STATE_LOCKED = 5\n    \"\"\"\n    The relays are locked, and should be available to accept commands shortly.\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.RelayState-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.RelayState.RELAY_STATE_CLOSED","title":"RELAY_STATE_CLOSED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RELAY_STATE_CLOSED = 3\n</code></pre> <p>The relays are closed, and the DC power line to the inverter is connected.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.RelayState.RELAY_STATE_ERROR","title":"RELAY_STATE_ERROR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RELAY_STATE_ERROR = 4\n</code></pre> <p>The relays are in an error state.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.RelayState.RELAY_STATE_LOCKED","title":"RELAY_STATE_LOCKED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RELAY_STATE_LOCKED = 5\n</code></pre> <p>The relays are locked, and should be available to accept commands shortly.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.RelayState.RELAY_STATE_OPENED","title":"RELAY_STATE_OPENED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RELAY_STATE_OPENED = 1\n</code></pre> <p>The relays are open, and the DC power line to the inverter is disconnected.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.RelayState.RELAY_STATE_PRECHARGING","title":"RELAY_STATE_PRECHARGING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RELAY_STATE_PRECHARGING = 2\n</code></pre> <p>The relays are closing, and the DC power line to the inverter is being connected.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.RelayState.RELAY_STATE_UNSPECIFIED","title":"RELAY_STATE_UNSPECIFIED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RELAY_STATE_UNSPECIFIED = 0\n</code></pre> <p>Default value.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.State","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.State  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>State message.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass State(betterproto.Message):\n    \"\"\"State message.\"\"\"\n\n    component_state: \"ComponentState\" = betterproto.enum_field(1)\n    \"\"\"The state of the overall component.\"\"\"\n\n    relay_state: \"RelayState\" = betterproto.enum_field(2)\n    \"\"\"The state of the DC relays.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.State-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.State.component_state","title":"component_state  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>component_state: ComponentState = enum_field(1)\n</code></pre> <p>The state of the overall component.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/battery/#frequenz.microgrid.betterproto.frequenz.api.microgrid.battery.State.relay_state","title":"relay_state  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>relay_state: RelayState = enum_field(2)\n</code></pre> <p>The state of the DC relays.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/common/","title":"common","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/common/#frequenz.microgrid.betterproto.frequenz.api.microgrid.common","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.common","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/common/#frequenz.microgrid.betterproto.frequenz.api.microgrid.common-classes","title":"Classes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/common/#frequenz.microgrid.betterproto.frequenz.api.microgrid.common.ErrorLevel","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.common.ErrorLevel","text":"<p>             Bases: <code>Enum</code></p> <p>Error levels definitions.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/common/__init__.py</code> <pre><code>class ErrorLevel(betterproto.Enum):\n    \"\"\"Error levels definitions.\"\"\"\n\n    ERROR_LEVEL_UNSPECIFIED = 0\n    \"\"\"Unspecified component error.\"\"\"\n\n    ERROR_LEVEL_WARN = 1\n    \"\"\"\n    Action must be taken to prevent a severe error from occurring in the\n    future.\n    \"\"\"\n\n    ERROR_LEVEL_CRITICAL = 2\n    \"\"\"\n    A severe error that causes the component to fail. Immediate action must be\n    taken.\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/common/#frequenz.microgrid.betterproto.frequenz.api.microgrid.common.ErrorLevel-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/common/#frequenz.microgrid.betterproto.frequenz.api.microgrid.common.ErrorLevel.ERROR_LEVEL_CRITICAL","title":"ERROR_LEVEL_CRITICAL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_LEVEL_CRITICAL = 2\n</code></pre> <p>A severe error that causes the component to fail. Immediate action must be taken.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/common/#frequenz.microgrid.betterproto.frequenz.api.microgrid.common.ErrorLevel.ERROR_LEVEL_UNSPECIFIED","title":"ERROR_LEVEL_UNSPECIFIED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_LEVEL_UNSPECIFIED = 0\n</code></pre> <p>Unspecified component error.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/common/#frequenz.microgrid.betterproto.frequenz.api.microgrid.common.ErrorLevel.ERROR_LEVEL_WARN","title":"ERROR_LEVEL_WARN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_LEVEL_WARN = 1\n</code></pre> <p>Action must be taken to prevent a severe error from occurring in the future.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/","title":"ev_charger","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger-classes","title":"Classes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.CableState","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.CableState","text":"<p>             Bases: <code>Enum</code></p> <p>The possible states of the cable connecting an EV charging station and an EV.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/__init__.py</code> <pre><code>class CableState(betterproto.Enum):\n    \"\"\"\n    The possible states of the cable connecting an EV charging station and an\n    EV.\n    \"\"\"\n\n    CABLE_STATE_UNSPECIFIED = 0\n    \"\"\"Default state.\"\"\"\n\n    CABLE_STATE_UNPLUGGED = 1\n    \"\"\"No cable is connected to the EV charging station.\"\"\"\n\n    CABLE_STATE_CHARGING_STATION_PLUGGED = 2\n    \"\"\"\n    A cable is connected to the EV charging station, but is not locked with it.\n    \"\"\"\n\n    CABLE_STATE_CHARGING_STATION_LOCKED = 3\n    \"\"\"A cable is connected to and locked with the EV charging station.\"\"\"\n\n    CABLE_STATE_EV_PLUGGED = 4\n    \"\"\"\n    A cable is connected to and locked with the EV charging station. The same\n    cable is connected to the EV, but is not locked with it.\n    \"\"\"\n\n    CABLE_STATE_EV_LOCKED = 5\n    \"\"\"\n    A cable is connected to and locked with the EV charging station. The same\n    cable is connected to and locked with the EV.\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.CableState-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.CableState.CABLE_STATE_CHARGING_STATION_LOCKED","title":"CABLE_STATE_CHARGING_STATION_LOCKED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CABLE_STATE_CHARGING_STATION_LOCKED = 3\n</code></pre> <p>A cable is connected to and locked with the EV charging station.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.CableState.CABLE_STATE_CHARGING_STATION_PLUGGED","title":"CABLE_STATE_CHARGING_STATION_PLUGGED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CABLE_STATE_CHARGING_STATION_PLUGGED = 2\n</code></pre> <p>A cable is connected to the EV charging station, but is not locked with it.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.CableState.CABLE_STATE_EV_LOCKED","title":"CABLE_STATE_EV_LOCKED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CABLE_STATE_EV_LOCKED = 5\n</code></pre> <p>A cable is connected to and locked with the EV charging station. The same cable is connected to and locked with the EV.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.CableState.CABLE_STATE_EV_PLUGGED","title":"CABLE_STATE_EV_PLUGGED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CABLE_STATE_EV_PLUGGED = 4\n</code></pre> <p>A cable is connected to and locked with the EV charging station. The same cable is connected to the EV, but is not locked with it.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.CableState.CABLE_STATE_UNPLUGGED","title":"CABLE_STATE_UNPLUGGED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CABLE_STATE_UNPLUGGED = 1\n</code></pre> <p>No cable is connected to the EV charging station.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.CableState.CABLE_STATE_UNSPECIFIED","title":"CABLE_STATE_UNSPECIFIED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CABLE_STATE_UNSPECIFIED = 0\n</code></pre> <p>Default state.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ComponentState","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ComponentState","text":"<p>             Bases: <code>Enum</code></p> <p>The possible states of an EV charging station.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/__init__.py</code> <pre><code>class ComponentState(betterproto.Enum):\n    \"\"\"The possible states of an EV charging station.\"\"\"\n\n    COMPONENT_STATE_UNSPECIFIED = 0\n    \"\"\"\n    Default state. This value is used only when the state information is not\n    available.\n    \"\"\"\n\n    COMPONENT_STATE_STARTING = 1\n    \"\"\"The EV charging station is starting up.\"\"\"\n\n    COMPONENT_STATE_NOT_READY = 2\n    \"\"\"The EV charging station is unplugged or RFID is not working.\"\"\"\n\n    COMPONENT_STATE_READY = 3\n    \"\"\"The EV charging station is ready and waiting for a charging request\"\"\"\n\n    COMPONENT_STATE_CHARGING = 4\n    \"\"\"The EV charging station is charging an EV.\"\"\"\n\n    COMPONENT_STATE_DISCHARGING = 5\n    \"\"\"\n    The EV charging station is discharging from an EV into the local microgrid.\n    \"\"\"\n\n    COMPONENT_STATE_ERROR = 6\n    \"\"\"The EV charging station is in an error state.\"\"\"\n\n    COMPONENT_STATE_AUTHORIZATION_REJECTED = 7\n    \"\"\"The EV charging station rejected the last authorization.\"\"\"\n\n    COMPONENT_STATE_INTERRUPTED = 8\n    \"\"\"The EV charging process hes been temporarily interrupted.\"\"\"\n\n    COMPONENT_STATE_UNKNOWN = 9\n    \"\"\"\n    The state is provided by the device, but it can not be parsed as any of the\n    above (known) states.\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ComponentState-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ComponentState.COMPONENT_STATE_AUTHORIZATION_REJECTED","title":"COMPONENT_STATE_AUTHORIZATION_REJECTED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_AUTHORIZATION_REJECTED = 7\n</code></pre> <p>The EV charging station rejected the last authorization.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ComponentState.COMPONENT_STATE_CHARGING","title":"COMPONENT_STATE_CHARGING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_CHARGING = 4\n</code></pre> <p>The EV charging station is charging an EV.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ComponentState.COMPONENT_STATE_DISCHARGING","title":"COMPONENT_STATE_DISCHARGING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_DISCHARGING = 5\n</code></pre> <p>The EV charging station is discharging from an EV into the local microgrid.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ComponentState.COMPONENT_STATE_ERROR","title":"COMPONENT_STATE_ERROR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_ERROR = 6\n</code></pre> <p>The EV charging station is in an error state.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ComponentState.COMPONENT_STATE_INTERRUPTED","title":"COMPONENT_STATE_INTERRUPTED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_INTERRUPTED = 8\n</code></pre> <p>The EV charging process hes been temporarily interrupted.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ComponentState.COMPONENT_STATE_NOT_READY","title":"COMPONENT_STATE_NOT_READY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_NOT_READY = 2\n</code></pre> <p>The EV charging station is unplugged or RFID is not working.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ComponentState.COMPONENT_STATE_READY","title":"COMPONENT_STATE_READY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_READY = 3\n</code></pre> <p>The EV charging station is ready and waiting for a charging request</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ComponentState.COMPONENT_STATE_STARTING","title":"COMPONENT_STATE_STARTING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_STARTING = 1\n</code></pre> <p>The EV charging station is starting up.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ComponentState.COMPONENT_STATE_UNKNOWN","title":"COMPONENT_STATE_UNKNOWN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_UNKNOWN = 9\n</code></pre> <p>The state is provided by the device, but it can not be parsed as any of the above (known) states.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ComponentState.COMPONENT_STATE_UNSPECIFIED","title":"COMPONENT_STATE_UNSPECIFIED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_UNSPECIFIED = 0\n</code></pre> <p>Default state. This value is used only when the state information is not available.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.Data","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.Data  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>EV charger data.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Data(betterproto.Message):\n    \"\"\"EV charger data.\"\"\"\n\n    dc: \"__common_metrics_electrical__.Dc\" = betterproto.message_field(1)\n    \"\"\"\n    DC metrics of the EV charging station. Contains data only if DC charging is\n    supported by the EV charging station. (in which case, the type of the EV\n    charging station is TYPE_DC or TYPE_HYBRID)\n    \"\"\"\n\n    ac: \"__common_metrics_electrical__.Ac\" = betterproto.message_field(2)\n    \"\"\"\n    AC metrics of the EV charging station. Contains data only if AC charging is\n    supported by the EV charging station. (in which case, the type of the EV\n    charging station is TYPE_AC or TYPE_HYBRID)\n    \"\"\"\n\n    temperature: \"__common_metrics__.Metric\" = betterproto.message_field(3)\n    \"\"\"The overall temperature of the EV charger. In degree Celsius (\u00b0C).\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.Data-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.Data.ac","title":"ac  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ac: Ac = message_field(2)\n</code></pre> <p>AC metrics of the EV charging station. Contains data only if AC charging is supported by the EV charging station. (in which case, the type of the EV charging station is TYPE_AC or TYPE_HYBRID)</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.Data.dc","title":"dc  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dc: Dc = message_field(1)\n</code></pre> <p>DC metrics of the EV charging station. Contains data only if DC charging is supported by the EV charging station. (in which case, the type of the EV charging station is TYPE_DC or TYPE_HYBRID)</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.Data.temperature","title":"temperature  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>temperature: Metric = message_field(3)\n</code></pre> <p>The overall temperature of the EV charger. In degree Celsius (\u00b0C).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.Error","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.Error  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Error message.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Error(betterproto.Message):\n    \"\"\"Error message.\"\"\"\n\n    code: \"ErrorCode\" = betterproto.enum_field(1)\n    \"\"\"The error code.\"\"\"\n\n    level: \"_common__.ErrorLevel\" = betterproto.enum_field(2)\n    \"\"\"The error severity level.\"\"\"\n\n    msg: str = betterproto.string_field(3)\n    \"\"\"The error message.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.Error-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.Error.code","title":"code  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>code: ErrorCode = enum_field(1)\n</code></pre> <p>The error code.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.Error.level","title":"level  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>level: ErrorLevel = enum_field(2)\n</code></pre> <p>The error severity level.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.Error.msg","title":"msg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>msg: str = string_field(3)\n</code></pre> <p>The error message.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ErrorCode","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ErrorCode","text":"<p>             Bases: <code>Enum</code></p> <p>Enumerated EV charger error codes.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/__init__.py</code> <pre><code>class ErrorCode(betterproto.Enum):\n    \"\"\"Enumerated EV charger error codes.\"\"\"\n\n    ERROR_CODE_UNSPECIFIED = 0\n    \"\"\"Unspecified.\"\"\"\n\n    ERROR_CODE_SWITCH_ON_FAULT = 1\n    \"\"\"Something is preventing the DC contactor from being switched on.\"\"\"\n\n    ERROR_CODE_UNDERVOLTAGE = 2\n    \"\"\"AC supply voltage is lower than expected.\"\"\"\n\n    ERROR_CODE_OVERVOLTAGE = 3\n    \"\"\"AC supply voltage is higher than expected.\"\"\"\n\n    ERROR_CODE_OVERCURRENT = 4\n    \"\"\"DC charging voltage is higher than expected.\"\"\"\n\n    ERROR_CODE_OVERTEMPERATURE = 5\n    \"\"\"Temperature in the charging station is higher than expected.\"\"\"\n\n    ERROR_CODE_UNEXPECTED_PILOT_FAILURE = 6\n    \"\"\"EV has sent an unexpected pilot signal.\"\"\"\n\n    ERROR_CODE_FAULT_CURRENT = 7\n    \"\"\"A fault current has been detected.\"\"\"\n\n    ERROR_CODE_SHORT_CIRCUIT = 8\n    \"\"\"A short circuit has been detected.\"\"\"\n\n    ERROR_CODE_CONFIG_ERROR = 9\n    \"\"\"The system is incorrectly configured.\"\"\"\n\n    ERROR_CODE_ILLEGAL_COMPONENT_STATE_REQUESTED = 10\n    \"\"\"The system received a request to move to an illegal state.\"\"\"\n\n    ERROR_CODE_HARDWARE_INACCESSIBLE = 11\n    \"\"\"The system cannot access the internal hardware.\"\"\"\n\n    ERROR_CODE_INTERNAL = 12\n    \"\"\"The system has detected an unspecified internal error.\"\"\"\n\n    ERROR_CODE_CABLE_LOST = 13\n    \"\"\"The charging cable was unplugged unexpectedly.\"\"\"\n\n    ERROR_CODE_CABLE_LOCK_FAILED = 14\n    \"\"\"The charging cable could not be locked.\"\"\"\n\n    ERROR_CODE_CABLE_INVALID = 15\n    \"\"\"The charging cable could not be locked.\"\"\"\n\n    ERROR_CODE_PLUG_UNKNOWN = 16\n    \"\"\"The charging cable has an unrecognised plug.\"\"\"\n\n    ERROR_CODE_CONSUMER_NON_STANDARD = 17\n    \"\"\"The connected consumer is not a standard-compliant EV.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ErrorCode-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ErrorCode.ERROR_CODE_CABLE_INVALID","title":"ERROR_CODE_CABLE_INVALID  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_CABLE_INVALID = 15\n</code></pre> <p>The charging cable could not be locked.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ErrorCode.ERROR_CODE_CABLE_LOCK_FAILED","title":"ERROR_CODE_CABLE_LOCK_FAILED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_CABLE_LOCK_FAILED = 14\n</code></pre> <p>The charging cable could not be locked.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ErrorCode.ERROR_CODE_CABLE_LOST","title":"ERROR_CODE_CABLE_LOST  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_CABLE_LOST = 13\n</code></pre> <p>The charging cable was unplugged unexpectedly.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ErrorCode.ERROR_CODE_CONFIG_ERROR","title":"ERROR_CODE_CONFIG_ERROR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_CONFIG_ERROR = 9\n</code></pre> <p>The system is incorrectly configured.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ErrorCode.ERROR_CODE_CONSUMER_NON_STANDARD","title":"ERROR_CODE_CONSUMER_NON_STANDARD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_CONSUMER_NON_STANDARD = 17\n</code></pre> <p>The connected consumer is not a standard-compliant EV.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ErrorCode.ERROR_CODE_FAULT_CURRENT","title":"ERROR_CODE_FAULT_CURRENT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_FAULT_CURRENT = 7\n</code></pre> <p>A fault current has been detected.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ErrorCode.ERROR_CODE_HARDWARE_INACCESSIBLE","title":"ERROR_CODE_HARDWARE_INACCESSIBLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_HARDWARE_INACCESSIBLE = 11\n</code></pre> <p>The system cannot access the internal hardware.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ErrorCode.ERROR_CODE_ILLEGAL_COMPONENT_STATE_REQUESTED","title":"ERROR_CODE_ILLEGAL_COMPONENT_STATE_REQUESTED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_ILLEGAL_COMPONENT_STATE_REQUESTED = 10\n</code></pre> <p>The system received a request to move to an illegal state.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ErrorCode.ERROR_CODE_INTERNAL","title":"ERROR_CODE_INTERNAL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_INTERNAL = 12\n</code></pre> <p>The system has detected an unspecified internal error.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ErrorCode.ERROR_CODE_OVERCURRENT","title":"ERROR_CODE_OVERCURRENT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_OVERCURRENT = 4\n</code></pre> <p>DC charging voltage is higher than expected.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ErrorCode.ERROR_CODE_OVERTEMPERATURE","title":"ERROR_CODE_OVERTEMPERATURE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_OVERTEMPERATURE = 5\n</code></pre> <p>Temperature in the charging station is higher than expected.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ErrorCode.ERROR_CODE_OVERVOLTAGE","title":"ERROR_CODE_OVERVOLTAGE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_OVERVOLTAGE = 3\n</code></pre> <p>AC supply voltage is higher than expected.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ErrorCode.ERROR_CODE_PLUG_UNKNOWN","title":"ERROR_CODE_PLUG_UNKNOWN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_PLUG_UNKNOWN = 16\n</code></pre> <p>The charging cable has an unrecognised plug.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ErrorCode.ERROR_CODE_SHORT_CIRCUIT","title":"ERROR_CODE_SHORT_CIRCUIT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_SHORT_CIRCUIT = 8\n</code></pre> <p>A short circuit has been detected.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ErrorCode.ERROR_CODE_SWITCH_ON_FAULT","title":"ERROR_CODE_SWITCH_ON_FAULT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_SWITCH_ON_FAULT = 1\n</code></pre> <p>Something is preventing the DC contactor from being switched on.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ErrorCode.ERROR_CODE_UNDERVOLTAGE","title":"ERROR_CODE_UNDERVOLTAGE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_UNDERVOLTAGE = 2\n</code></pre> <p>AC supply voltage is lower than expected.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ErrorCode.ERROR_CODE_UNEXPECTED_PILOT_FAILURE","title":"ERROR_CODE_UNEXPECTED_PILOT_FAILURE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_UNEXPECTED_PILOT_FAILURE = 6\n</code></pre> <p>EV has sent an unexpected pilot signal.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.ErrorCode.ERROR_CODE_UNSPECIFIED","title":"ERROR_CODE_UNSPECIFIED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_UNSPECIFIED = 0\n</code></pre> <p>Unspecified.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.EvCharger","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.EvCharger  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>EvCharger details</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass EvCharger(betterproto.Message):\n    \"\"\"EvCharger details\"\"\"\n\n    properties: \"Properties\" = betterproto.message_field(1)\n    \"\"\"The component properties\"\"\"\n\n    state: \"State\" = betterproto.message_field(2)\n    \"\"\"The EV charging station's state.\"\"\"\n\n    errors: List[\"Error\"] = betterproto.message_field(3)\n    \"\"\"\n    A list of errors encountered the component. An empty list implies no error.\n    \"\"\"\n\n    data: \"Data\" = betterproto.message_field(4)\n    \"\"\"An EV charger data object.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.EvCharger-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.EvCharger.data","title":"data  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>data: Data = message_field(4)\n</code></pre> <p>An EV charger data object.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.EvCharger.errors","title":"errors  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>errors: List[Error] = message_field(3)\n</code></pre> <p>A list of errors encountered the component. An empty list implies no error.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.EvCharger.properties","title":"properties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>properties: Properties = message_field(1)\n</code></pre> <p>The component properties</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.EvCharger.state","title":"state  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>state: State = message_field(2)\n</code></pre> <p>The EV charging station's state.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.Metadata","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.Metadata  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>The EV charger metadata.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Metadata(betterproto.Message):\n    \"\"\"The EV charger metadata.\"\"\"\n\n    type: \"__common_components__.EvChargerType\" = betterproto.enum_field(1)\n    \"\"\"The EV charger type.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.Metadata-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.Metadata.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: EvChargerType = enum_field(1)\n</code></pre> <p>The EV charger type.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.Properties","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.Properties  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>EV charger properties.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Properties(betterproto.Message):\n    \"\"\"EV charger properties.\"\"\"\n\n    firmware_ver: str = betterproto.string_field(1)\n    \"\"\"The firmware version of the component.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.Properties-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.Properties.firmware_ver","title":"firmware_ver  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>firmware_ver: str = string_field(1)\n</code></pre> <p>The firmware version of the component.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.State","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.State  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>State message.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass State(betterproto.Message):\n    \"\"\"State message.\"\"\"\n\n    component_state: \"ComponentState\" = betterproto.enum_field(1)\n    \"\"\"The state of the overall component.\"\"\"\n\n    cable_state: \"CableState\" = betterproto.enum_field(2)\n    \"\"\"The state of the charging cable.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.State-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.State.cable_state","title":"cable_state  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cable_state: CableState = enum_field(2)\n</code></pre> <p>The state of the charging cable.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/ev_charger/#frequenz.microgrid.betterproto.frequenz.api.microgrid.ev_charger.State.component_state","title":"component_state  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>component_state: ComponentState = enum_field(1)\n</code></pre> <p>The state of the overall component.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/grid/","title":"grid","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/grid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.grid","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.grid","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/grid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.grid-classes","title":"Classes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/grid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.grid.Metadata","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.grid.Metadata  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>The grid connection point metadata.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/grid/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Metadata(betterproto.Message):\n    \"\"\"The grid connection point metadata.\"\"\"\n\n    rated_fuse_current: int = betterproto.uint32_field(1)\n    \"\"\"\n    This refers to the maximum amount of electrical current, in amperes, that a\n    fuse at the grid connection point is designed to safely carry under normal\n    operating conditions. This limit applies to currents both flowing in or out\n    of each of the 3 phases individually. In other words, a current _i_ A at\n    one of the phases of the grid connection point must comply with the\n    following constraint: `-rated_fuse_current &lt;= i &lt;= rated_fuse_current`\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/grid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.grid.Metadata-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/grid/#frequenz.microgrid.betterproto.frequenz.api.microgrid.grid.Metadata.rated_fuse_current","title":"rated_fuse_current  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rated_fuse_current: int = uint32_field(1)\n</code></pre> <p>This refers to the maximum amount of electrical current, in amperes, that a fuse at the grid connection point is designed to safely carry under normal operating conditions. This limit applies to currents both flowing in or out of each of the 3 phases individually. In other words, a current i A at one of the phases of the grid connection point must comply with the following constraint: <code>-rated_fuse_current &lt;= i &lt;= rated_fuse_current</code></p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/","title":"inverter","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter-classes","title":"Classes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.ComponentState","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.ComponentState","text":"<p>             Bases: <code>Enum</code></p> <p>Enumerated inverter states.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/__init__.py</code> <pre><code>class ComponentState(betterproto.Enum):\n    \"\"\"Enumerated inverter states.\"\"\"\n\n    COMPONENT_STATE_UNSPECIFIED = 0\n    \"\"\"Default value.\"\"\"\n\n    COMPONENT_STATE_OFF = 1\n    \"\"\"Inverter is switched off.\"\"\"\n\n    COMPONENT_STATE_SWITCHING_ON = 2\n    \"\"\"\n    The inverter is starting up and needs some time to become fully\n    operational.\n    \"\"\"\n\n    COMPONENT_STATE_SWITCHING_OFF = 3\n    \"\"\"\n    The inverter is switching off and needs some time to fully shut down.\n    \"\"\"\n\n    COMPONENT_STATE_STANDBY = 4\n    \"\"\"\n    The inverter is in a standby state, and is disconnected from the grid. When\n    connected to the grid, it run a few tests, and move to the `IDLE` state.\n    \"\"\"\n\n    COMPONENT_STATE_IDLE = 5\n    \"\"\"The inverter is idle.\"\"\"\n\n    COMPONENT_STATE_CHARGING = 10\n    \"\"\"\n    The inverter is consuming electrical energy to charge batteries. Applicable\n    to `BATTERY` and `HYBRID` inverters only.\n    \"\"\"\n\n    COMPONENT_STATE_DISCHARGING = 11\n    \"\"\"The inverter is generating electrical energy.\"\"\"\n\n    COMPONENT_STATE_ERROR = 14\n    \"\"\"The inverter is in a faulty state.\"\"\"\n\n    COMPONENT_STATE_UNAVAILABLE = 15\n    \"\"\"\n    The inverter is online, but currently unavailable, possibly due to a pre-\n    scheduled maintenance.\n    \"\"\"\n\n    COMPONENT_STATE_UNKNOWN = 16\n    \"\"\"\n    The state is provided by the device, but it can not be parsed as any of the\n    above (known) states.\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.ComponentState-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.ComponentState.COMPONENT_STATE_CHARGING","title":"COMPONENT_STATE_CHARGING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_CHARGING = 10\n</code></pre> <p>The inverter is consuming electrical energy to charge batteries. Applicable to <code>BATTERY</code> and <code>HYBRID</code> inverters only.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.ComponentState.COMPONENT_STATE_DISCHARGING","title":"COMPONENT_STATE_DISCHARGING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_DISCHARGING = 11\n</code></pre> <p>The inverter is generating electrical energy.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.ComponentState.COMPONENT_STATE_ERROR","title":"COMPONENT_STATE_ERROR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_ERROR = 14\n</code></pre> <p>The inverter is in a faulty state.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.ComponentState.COMPONENT_STATE_IDLE","title":"COMPONENT_STATE_IDLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_IDLE = 5\n</code></pre> <p>The inverter is idle.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.ComponentState.COMPONENT_STATE_OFF","title":"COMPONENT_STATE_OFF  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_OFF = 1\n</code></pre> <p>Inverter is switched off.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.ComponentState.COMPONENT_STATE_STANDBY","title":"COMPONENT_STATE_STANDBY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_STANDBY = 4\n</code></pre> <p>The inverter is in a standby state, and is disconnected from the grid. When connected to the grid, it run a few tests, and move to the <code>IDLE</code> state.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.ComponentState.COMPONENT_STATE_SWITCHING_OFF","title":"COMPONENT_STATE_SWITCHING_OFF  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_SWITCHING_OFF = 3\n</code></pre> <p>The inverter is switching off and needs some time to fully shut down.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.ComponentState.COMPONENT_STATE_SWITCHING_ON","title":"COMPONENT_STATE_SWITCHING_ON  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_SWITCHING_ON = 2\n</code></pre> <p>The inverter is starting up and needs some time to become fully operational.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.ComponentState.COMPONENT_STATE_UNAVAILABLE","title":"COMPONENT_STATE_UNAVAILABLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_UNAVAILABLE = 15\n</code></pre> <p>The inverter is online, but currently unavailable, possibly due to a pre- scheduled maintenance.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.ComponentState.COMPONENT_STATE_UNKNOWN","title":"COMPONENT_STATE_UNKNOWN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_UNKNOWN = 16\n</code></pre> <p>The state is provided by the device, but it can not be parsed as any of the above (known) states.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.ComponentState.COMPONENT_STATE_UNSPECIFIED","title":"COMPONENT_STATE_UNSPECIFIED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_UNSPECIFIED = 0\n</code></pre> <p>Default value.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Data","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Data  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Inverter data.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Data(betterproto.Message):\n    \"\"\"Inverter data.\"\"\"\n\n    dc_battery: \"__common_metrics_electrical__.Dc\" = betterproto.message_field(4)\n    \"\"\"\n    DC metrics for the inverter-battery linkage. This is applicable to\n    `BATTERY` and `HYBRID` inverters only.\n    \"\"\"\n\n    dc_solar: \"__common_metrics_electrical__.Dc\" = betterproto.message_field(5)\n    \"\"\"\n    DC metrics for the inverter-PV linkage. This is applicable to `SOLAR` and\n    `HYBRID` inverters only.\n    \"\"\"\n\n    ac: \"__common_metrics_electrical__.Ac\" = betterproto.message_field(2)\n    \"\"\"AC metrics of the inverter.\"\"\"\n\n    temperature: \"__common_metrics__.Metric\" = betterproto.message_field(3)\n    \"\"\"The verall temperature of the inverter. In degree Celsius (\u00b0C).\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Data-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Data.ac","title":"ac  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ac: Ac = message_field(2)\n</code></pre> <p>AC metrics of the inverter.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Data.dc_battery","title":"dc_battery  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dc_battery: Dc = message_field(4)\n</code></pre> <p>DC metrics for the inverter-battery linkage. This is applicable to <code>BATTERY</code> and <code>HYBRID</code> inverters only.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Data.dc_solar","title":"dc_solar  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dc_solar: Dc = message_field(5)\n</code></pre> <p>DC metrics for the inverter-PV linkage. This is applicable to <code>SOLAR</code> and <code>HYBRID</code> inverters only.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Data.temperature","title":"temperature  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>temperature: Metric = message_field(3)\n</code></pre> <p>The verall temperature of the inverter. In degree Celsius (\u00b0C).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Error","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Error  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Error message.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Error(betterproto.Message):\n    \"\"\"Error message.\"\"\"\n\n    code: \"ErrorCode\" = betterproto.enum_field(1)\n    \"\"\"The error code.\"\"\"\n\n    level: \"_common__.ErrorLevel\" = betterproto.enum_field(2)\n    \"\"\"The error severity level.\"\"\"\n\n    msg: str = betterproto.string_field(3)\n    \"\"\"The error message.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Error-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Error.code","title":"code  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>code: ErrorCode = enum_field(1)\n</code></pre> <p>The error code.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Error.level","title":"level  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>level: ErrorLevel = enum_field(2)\n</code></pre> <p>The error severity level.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Error.msg","title":"msg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>msg: str = string_field(3)\n</code></pre> <p>The error message.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.ErrorCode","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.ErrorCode","text":"<p>             Bases: <code>Enum</code></p> <p>Enumerated inverter error codes.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/__init__.py</code> <pre><code>class ErrorCode(betterproto.Enum):\n    \"\"\"Enumerated inverter error codes.\"\"\"\n\n    ERROR_CODE_UNSPECIFIED = 0\n    \"\"\"Unspecified.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.ErrorCode-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.ErrorCode.ERROR_CODE_UNSPECIFIED","title":"ERROR_CODE_UNSPECIFIED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_UNSPECIFIED = 0\n</code></pre> <p>Unspecified.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Inverter","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Inverter  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Inverter message definition.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Inverter(betterproto.Message):\n    \"\"\"Inverter message definition.\"\"\"\n\n    properties: \"Properties\" = betterproto.message_field(1)\n    \"\"\"The component properties\"\"\"\n\n    state: \"State\" = betterproto.message_field(2)\n    \"\"\"The inverter's state.\"\"\"\n\n    errors: List[\"Error\"] = betterproto.message_field(3)\n    \"\"\"\n    A list of errors encountered the component. An empty list implies no error.\n    \"\"\"\n\n    data: \"Data\" = betterproto.message_field(4)\n    \"\"\"An inverter data object.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Inverter-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Inverter.data","title":"data  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>data: Data = message_field(4)\n</code></pre> <p>An inverter data object.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Inverter.errors","title":"errors  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>errors: List[Error] = message_field(3)\n</code></pre> <p>A list of errors encountered the component. An empty list implies no error.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Inverter.properties","title":"properties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>properties: Properties = message_field(1)\n</code></pre> <p>The component properties</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Inverter.state","title":"state  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>state: State = message_field(2)\n</code></pre> <p>The inverter's state.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Metadata","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Metadata  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>The inverter metadata.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Metadata(betterproto.Message):\n    \"\"\"The inverter metadata.\"\"\"\n\n    type: \"__common_components__.InverterType\" = betterproto.enum_field(1)\n    \"\"\"The inverter type.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Metadata-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Metadata.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: InverterType = enum_field(1)\n</code></pre> <p>The inverter type.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Properties","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Properties  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Inverter properties.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Properties(betterproto.Message):\n    \"\"\"Inverter properties.\"\"\"\n\n    firmware_ver: str = betterproto.string_field(1)\n    \"\"\"The firmware version of the component.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Properties-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Properties.firmware_ver","title":"firmware_ver  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>firmware_ver: str = string_field(1)\n</code></pre> <p>The firmware version of the component.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.State","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.State  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>State message.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass State(betterproto.Message):\n    \"\"\"State message.\"\"\"\n\n    component_state: \"ComponentState\" = betterproto.enum_field(1)\n    \"\"\"The state of the overall component.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.State-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.State.component_state","title":"component_state  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>component_state: ComponentState = enum_field(1)\n</code></pre> <p>The state of the overall component.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Type","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.inverter.Type","text":"<p>             Bases: <code>Enum</code></p> <p>Enumerated inverter types.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/inverter/__init__.py</code> <pre><code>class Type(betterproto.Enum):\n    \"\"\"Enumerated inverter types.\"\"\"\n\n    TYPE_UNSPECIFIED = 0\n    TYPE_BATTERY = 1\n    TYPE_SOLAR = 2\n    TYPE_HYBRID = 3\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/","title":"meter","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.meter","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter-classes","title":"Classes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.ComponentState","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.ComponentState","text":"<p>             Bases: <code>Enum</code></p> <p>Enumerated meter states.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/__init__.py</code> <pre><code>class ComponentState(betterproto.Enum):\n    \"\"\"Enumerated meter states.\"\"\"\n\n    COMPONENT_STATE_UNSPECIFIED = 0\n    \"\"\"Unspecified state.\"\"\"\n\n    COMPONENT_STATE_OK = 1\n    \"\"\"The meter is behaving as expected.\"\"\"\n\n    COMPONENT_STATE_ERROR = 2\n    \"\"\"The meter is in an error state.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.ComponentState-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.ComponentState.COMPONENT_STATE_ERROR","title":"COMPONENT_STATE_ERROR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_ERROR = 2\n</code></pre> <p>The meter is in an error state.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.ComponentState.COMPONENT_STATE_OK","title":"COMPONENT_STATE_OK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_OK = 1\n</code></pre> <p>The meter is behaving as expected.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.ComponentState.COMPONENT_STATE_UNSPECIFIED","title":"COMPONENT_STATE_UNSPECIFIED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_UNSPECIFIED = 0\n</code></pre> <p>Unspecified state.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Data","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Data  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Meter data.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Data(betterproto.Message):\n    \"\"\"Meter data.\"\"\"\n\n    ac: \"__common_metrics_electrical__.Ac\" = betterproto.message_field(1)\n    \"\"\"AC metrics of the inverter.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Data-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Data.ac","title":"ac  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ac: Ac = message_field(1)\n</code></pre> <p>AC metrics of the inverter.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Error","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Error  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Error message.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Error(betterproto.Message):\n    \"\"\"Error message.\"\"\"\n\n    code: \"ErrorCode\" = betterproto.enum_field(1)\n    \"\"\"The error code.\"\"\"\n\n    level: \"_common__.ErrorLevel\" = betterproto.enum_field(2)\n    \"\"\"The error severity level.\"\"\"\n\n    msg: str = betterproto.string_field(3)\n    \"\"\"The error message.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Error-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Error.code","title":"code  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>code: ErrorCode = enum_field(1)\n</code></pre> <p>The error code.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Error.level","title":"level  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>level: ErrorLevel = enum_field(2)\n</code></pre> <p>The error severity level.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Error.msg","title":"msg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>msg: str = string_field(3)\n</code></pre> <p>The error message.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.ErrorCode","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.ErrorCode","text":"<p>             Bases: <code>Enum</code></p> <p>Enumerated meter error codes.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/__init__.py</code> <pre><code>class ErrorCode(betterproto.Enum):\n    \"\"\"Enumerated meter error codes.\"\"\"\n\n    ERROR_CODE_UNSPECIFIED = 0\n    \"\"\"Unspecified.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.ErrorCode-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.ErrorCode.ERROR_CODE_UNSPECIFIED","title":"ERROR_CODE_UNSPECIFIED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_UNSPECIFIED = 0\n</code></pre> <p>Unspecified.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Metadata","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Metadata  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>The meter metadata.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Metadata(betterproto.Message):\n    \"\"\"The meter metadata.\"\"\"\n\n    type: \"Type\" = betterproto.enum_field(1)\n    \"\"\"The meter type.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Metadata-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Metadata.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: Type = enum_field(1)\n</code></pre> <p>The meter type.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Meter","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Meter  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Meter details</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Meter(betterproto.Message):\n    \"\"\"Meter details\"\"\"\n\n    properties: \"Properties\" = betterproto.message_field(1)\n    \"\"\"The component properties\"\"\"\n\n    state: \"State\" = betterproto.message_field(2)\n    \"\"\"The meter's state.\"\"\"\n\n    errors: List[\"Error\"] = betterproto.message_field(3)\n    \"\"\"\n    A list of errors encountered the component. An empty list implies no error.\n    \"\"\"\n\n    data: \"Data\" = betterproto.message_field(4)\n    \"\"\"A meter data object.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Meter-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Meter.data","title":"data  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>data: Data = message_field(4)\n</code></pre> <p>A meter data object.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Meter.errors","title":"errors  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>errors: List[Error] = message_field(3)\n</code></pre> <p>A list of errors encountered the component. An empty list implies no error.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Meter.properties","title":"properties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>properties: Properties = message_field(1)\n</code></pre> <p>The component properties</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Meter.state","title":"state  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>state: State = message_field(2)\n</code></pre> <p>The meter's state.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Properties","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Properties  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Meter properties.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Properties(betterproto.Message):\n    \"\"\"Meter properties.\"\"\"\n\n    firmware_ver: str = betterproto.string_field(1)\n    \"\"\"The firmware version of the component.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Properties-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Properties.firmware_ver","title":"firmware_ver  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>firmware_ver: str = string_field(1)\n</code></pre> <p>The firmware version of the component.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.State","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.State  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>State message.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass State(betterproto.Message):\n    \"\"\"State message.\"\"\"\n\n    component_state: \"ComponentState\" = betterproto.enum_field(1)\n    \"\"\"The state of the overall component.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.State-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.State.component_state","title":"component_state  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>component_state: ComponentState = enum_field(1)\n</code></pre> <p>The state of the overall component.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Type","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Type","text":"<p>             Bases: <code>Enum</code></p> <p>Enumerated meter types.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/__init__.py</code> <pre><code>class Type(betterproto.Enum):\n    \"\"\"Enumerated meter types.\"\"\"\n\n    TYPE_UNSPECIFIED = 0\n    TYPE_PRODUCTION = 1\n    \"\"\"AC production power meter / inverter production AC power (fallback)\"\"\"\n\n    TYPE_CONSUMPTION = 2\n    \"\"\"Consumption meter\"\"\"\n\n    TYPE_FEED_IN = 3\n    \"\"\"Exported to grid meter\"\"\"\n\n    TYPE_PURCHASED = 4\n    \"\"\"Imported power from grid meter\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Type-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Type.TYPE_CONSUMPTION","title":"TYPE_CONSUMPTION  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TYPE_CONSUMPTION = 2\n</code></pre> <p>Consumption meter</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Type.TYPE_FEED_IN","title":"TYPE_FEED_IN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TYPE_FEED_IN = 3\n</code></pre> <p>Exported to grid meter</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Type.TYPE_PRODUCTION","title":"TYPE_PRODUCTION  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TYPE_PRODUCTION = 1\n</code></pre> <p>AC production power meter / inverter production AC power (fallback)</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/meter/#frequenz.microgrid.betterproto.frequenz.api.microgrid.meter.Type.TYPE_PURCHASED","title":"TYPE_PURCHASED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TYPE_PURCHASED = 4\n</code></pre> <p>Imported power from grid meter</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/","title":"sensor","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor-classes","title":"Classes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.ComponentState","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.ComponentState","text":"<p>             Bases: <code>Enum</code></p> <p>Enumerated sensor states.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/__init__.py</code> <pre><code>class ComponentState(betterproto.Enum):\n    \"\"\"Enumerated sensor states.\"\"\"\n\n    COMPONENT_STATE_UNSPECIFIED = 0\n    \"\"\"Unspecified state.\"\"\"\n\n    COMPONENT_STATE_OK = 1\n    \"\"\"The sensor is behaving as expected.\"\"\"\n\n    COMPONENT_STATE_ERROR = 2\n    \"\"\"The sensor is in an error state.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.ComponentState-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.ComponentState.COMPONENT_STATE_ERROR","title":"COMPONENT_STATE_ERROR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_ERROR = 2\n</code></pre> <p>The sensor is in an error state.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.ComponentState.COMPONENT_STATE_OK","title":"COMPONENT_STATE_OK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_OK = 1\n</code></pre> <p>The sensor is behaving as expected.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.ComponentState.COMPONENT_STATE_UNSPECIFIED","title":"COMPONENT_STATE_UNSPECIFIED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMPONENT_STATE_UNSPECIFIED = 0\n</code></pre> <p>Unspecified state.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.Data","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.Data  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Sensor data.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Data(betterproto.Message):\n    \"\"\"Sensor data.\"\"\"\n\n    sensor_data: List[\"SensorData\"] = betterproto.message_field(1)\n    \"\"\"AC metrics of the inverter.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.Data-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.Data.sensor_data","title":"sensor_data  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sensor_data: List[SensorData] = message_field(1)\n</code></pre> <p>AC metrics of the inverter.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.Error","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.Error  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Error message.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Error(betterproto.Message):\n    \"\"\"Error message.\"\"\"\n\n    code: \"ErrorCode\" = betterproto.enum_field(1)\n    \"\"\"The error code.\"\"\"\n\n    level: \"_common__.ErrorLevel\" = betterproto.enum_field(2)\n    \"\"\"The error severity level.\"\"\"\n\n    msg: str = betterproto.string_field(3)\n    \"\"\"The error message.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.Error-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.Error.code","title":"code  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>code: ErrorCode = enum_field(1)\n</code></pre> <p>The error code.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.Error.level","title":"level  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>level: ErrorLevel = enum_field(2)\n</code></pre> <p>The error severity level.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.Error.msg","title":"msg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>msg: str = string_field(3)\n</code></pre> <p>The error message.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.ErrorCode","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.ErrorCode","text":"<p>             Bases: <code>Enum</code></p> <p>Enumerated sensor error codes.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/__init__.py</code> <pre><code>class ErrorCode(betterproto.Enum):\n    \"\"\"Enumerated sensor error codes.\"\"\"\n\n    ERROR_CODE_UNSPECIFIED = 0\n    \"\"\"Unspecified.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.ErrorCode-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.ErrorCode.ERROR_CODE_UNSPECIFIED","title":"ERROR_CODE_UNSPECIFIED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR_CODE_UNSPECIFIED = 0\n</code></pre> <p>Unspecified.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.Metadata","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.Metadata  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>The sensor metadata.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Metadata(betterproto.Message):\n    \"\"\"The sensor metadata.\"\"\"\n\n    type: \"__common_components__.SensorType\" = betterproto.enum_field(1)\n    \"\"\"The sensor type.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.Metadata-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.Metadata.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: SensorType = enum_field(1)\n</code></pre> <p>The sensor type.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.Properties","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.Properties  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Sensor properties.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Properties(betterproto.Message):\n    \"\"\"Sensor properties.\"\"\"\n\n    firmware_ver: str = betterproto.string_field(1)\n    \"\"\"The firmware version of the component.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.Properties-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.Properties.firmware_ver","title":"firmware_ver  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>firmware_ver: str = string_field(1)\n</code></pre> <p>The firmware version of the component.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.Sensor","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.Sensor  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Sensor details</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Sensor(betterproto.Message):\n    \"\"\"Sensor details\"\"\"\n\n    properties: \"Properties\" = betterproto.message_field(1)\n    \"\"\"The component properties\"\"\"\n\n    state: \"State\" = betterproto.message_field(2)\n    \"\"\"The sensor's state.\"\"\"\n\n    errors: List[\"Error\"] = betterproto.message_field(3)\n    \"\"\"\n    A list of errors encountered the component. An empty list implies no error.\n    \"\"\"\n\n    data: \"Data\" = betterproto.message_field(4)\n    \"\"\"Sensor data object.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.Sensor-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.Sensor.data","title":"data  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>data: Data = message_field(4)\n</code></pre> <p>Sensor data object.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.Sensor.errors","title":"errors  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>errors: List[Error] = message_field(3)\n</code></pre> <p>A list of errors encountered the component. An empty list implies no error.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.Sensor.properties","title":"properties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>properties: Properties = message_field(1)\n</code></pre> <p>The component properties</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.Sensor.state","title":"state  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>state: State = message_field(2)\n</code></pre> <p>The sensor's state.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.SensorData","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.SensorData  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>A value of a single metric.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass SensorData(betterproto.Message):\n    \"\"\"A value of a single metric.\"\"\"\n\n    value: float = betterproto.float_field(1)\n    \"\"\"The metric value.\"\"\"\n\n    sensor_metric: \"SensorMetric\" = betterproto.enum_field(2)\n    \"\"\"The metric name.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.SensorData-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.SensorData.sensor_metric","title":"sensor_metric  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sensor_metric: SensorMetric = enum_field(2)\n</code></pre> <p>The metric name.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.SensorData.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: float = float_field(1)\n</code></pre> <p>The metric value.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.SensorMetric","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.SensorMetric","text":"<p>             Bases: <code>Enum</code></p> <p>The type of the metric reported in a sensor data sample.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/__init__.py</code> <pre><code>class SensorMetric(betterproto.Enum):\n    \"\"\"The type of the metric reported in a sensor data sample.\"\"\"\n\n    SENSOR_METRIC_UNSPECIFIED = 0\n    \"\"\"Unspecified.\"\"\"\n\n    SENSOR_METRIC_TEMPERATURE = 1\n    \"\"\"Temperature. In Celsius (\u00b0C).\"\"\"\n\n    SENSOR_METRIC_HUMIDITY = 2\n    \"\"\"Humidity In percentage (%).\"\"\"\n\n    SENSOR_METRIC_PRESSURE = 3\n    \"\"\"Pressure In Pascal (Pa).\"\"\"\n\n    SENSOR_METRIC_IRRADIANCE = 4\n    \"\"\"Irradiance / Radiation flux In watts per square meter (W / m^2).\"\"\"\n\n    SENSOR_METRIC_VELOCITY = 5\n    \"\"\"Velocity In meters per second (m / s).\"\"\"\n\n    SENSOR_METRIC_ACCELERATION = 6\n    \"\"\"Acceleration. In meters per second per second (m / s^2)\"\"\"\n\n    SENSOR_METRIC_ANGLE = 7\n    \"\"\"\n    Metric to represent angles, for metrics like direction. In angles with\n    respect to the (magnetic) North (\u00b0).\n    \"\"\"\n\n    SENSOR_METRIC_DEW_POINT = 8\n    \"\"\"\n    Dew point. The temperature at which the air becomes saturated with water\n    vapor. In Celsius (\u00b0C).\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.SensorMetric-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.SensorMetric.SENSOR_METRIC_ACCELERATION","title":"SENSOR_METRIC_ACCELERATION  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SENSOR_METRIC_ACCELERATION = 6\n</code></pre> <p>Acceleration. In meters per second per second (m / s^2)</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.SensorMetric.SENSOR_METRIC_ANGLE","title":"SENSOR_METRIC_ANGLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SENSOR_METRIC_ANGLE = 7\n</code></pre> <p>Metric to represent angles, for metrics like direction. In angles with respect to the (magnetic) North (\u00b0).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.SensorMetric.SENSOR_METRIC_DEW_POINT","title":"SENSOR_METRIC_DEW_POINT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SENSOR_METRIC_DEW_POINT = 8\n</code></pre> <p>Dew point. The temperature at which the air becomes saturated with water vapor. In Celsius (\u00b0C).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.SensorMetric.SENSOR_METRIC_HUMIDITY","title":"SENSOR_METRIC_HUMIDITY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SENSOR_METRIC_HUMIDITY = 2\n</code></pre> <p>Humidity In percentage (%).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.SensorMetric.SENSOR_METRIC_IRRADIANCE","title":"SENSOR_METRIC_IRRADIANCE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SENSOR_METRIC_IRRADIANCE = 4\n</code></pre> <p>Irradiance / Radiation flux In watts per square meter (W / m^2).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.SensorMetric.SENSOR_METRIC_PRESSURE","title":"SENSOR_METRIC_PRESSURE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SENSOR_METRIC_PRESSURE = 3\n</code></pre> <p>Pressure In Pascal (Pa).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.SensorMetric.SENSOR_METRIC_TEMPERATURE","title":"SENSOR_METRIC_TEMPERATURE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SENSOR_METRIC_TEMPERATURE = 1\n</code></pre> <p>Temperature. In Celsius (\u00b0C).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.SensorMetric.SENSOR_METRIC_UNSPECIFIED","title":"SENSOR_METRIC_UNSPECIFIED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SENSOR_METRIC_UNSPECIFIED = 0\n</code></pre> <p>Unspecified.</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.SensorMetric.SENSOR_METRIC_VELOCITY","title":"SENSOR_METRIC_VELOCITY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SENSOR_METRIC_VELOCITY = 5\n</code></pre> <p>Velocity In meters per second (m / s).</p>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.State","title":"frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.State  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>State message.</p> Source code in <code>src/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass State(betterproto.Message):\n    \"\"\"State message.\"\"\"\n\n    component_state: \"ComponentState\" = betterproto.enum_field(1)\n    \"\"\"The state of the overall component.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.State-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/frequenz/api/microgrid/sensor/#frequenz.microgrid.betterproto.frequenz.api.microgrid.sensor.State.component_state","title":"component_state  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>component_state: ComponentState = enum_field(1)\n</code></pre> <p>The state of the overall component.</p>"},{"location":"reference/frequenz/microgrid/betterproto/google/","title":"Index","text":""},{"location":"reference/frequenz/microgrid/betterproto/google/#frequenz.microgrid.betterproto.google","title":"frequenz.microgrid.betterproto.google","text":""},{"location":"reference/frequenz/microgrid/betterproto/google/api/","title":"api","text":""},{"location":"reference/frequenz/microgrid/betterproto/google/api/#frequenz.microgrid.betterproto.google.api","title":"frequenz.microgrid.betterproto.google.api","text":""},{"location":"reference/frequenz/microgrid/betterproto/google/api/#frequenz.microgrid.betterproto.google.api-classes","title":"Classes","text":""},{"location":"reference/frequenz/microgrid/betterproto/google/api/#frequenz.microgrid.betterproto.google.api.CustomHttpPattern","title":"frequenz.microgrid.betterproto.google.api.CustomHttpPattern  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>A custom pattern is used for defining custom HTTP verb.</p> Source code in <code>src/frequenz/microgrid/betterproto/google/api/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass CustomHttpPattern(betterproto.Message):\n    \"\"\"A custom pattern is used for defining custom HTTP verb.\"\"\"\n\n    kind: str = betterproto.string_field(1)\n    \"\"\"The name of this custom HTTP verb.\"\"\"\n\n    path: str = betterproto.string_field(2)\n    \"\"\"The path matched by this custom verb.\"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/google/api/#frequenz.microgrid.betterproto.google.api.CustomHttpPattern-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/google/api/#frequenz.microgrid.betterproto.google.api.CustomHttpPattern.kind","title":"kind  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>kind: str = string_field(1)\n</code></pre> <p>The name of this custom HTTP verb.</p>"},{"location":"reference/frequenz/microgrid/betterproto/google/api/#frequenz.microgrid.betterproto.google.api.CustomHttpPattern.path","title":"path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>path: str = string_field(2)\n</code></pre> <p>The path matched by this custom verb.</p>"},{"location":"reference/frequenz/microgrid/betterproto/google/api/#frequenz.microgrid.betterproto.google.api.Http","title":"frequenz.microgrid.betterproto.google.api.Http  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p>Defines the HTTP configuration for an API service. It contains a list of HttpRule, each specifying the mapping of an RPC method to one or more HTTP REST API methods.</p> Source code in <code>src/frequenz/microgrid/betterproto/google/api/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass Http(betterproto.Message):\n    \"\"\"\n    Defines the HTTP configuration for an API service. It contains a list of\n    [HttpRule][google.api.HttpRule], each specifying the mapping of an RPC\n    method to one or more HTTP REST API methods.\n    \"\"\"\n\n    rules: List[\"HttpRule\"] = betterproto.message_field(1)\n    \"\"\"\n    A list of HTTP configuration rules that apply to individual API methods.\n    **NOTE:** All service configuration rules follow \"last one wins\" order.\n    \"\"\"\n\n    fully_decode_reserved_expansion: bool = betterproto.bool_field(2)\n    \"\"\"\n    When set to true, URL path parmeters will be fully URI-decoded except in\n    cases of single segment matches in reserved expansion, where \"%2F\" will be\n    left encoded. The default behavior is to not decode RFC 6570 reserved\n    characters in multi segment matches.\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/google/api/#frequenz.microgrid.betterproto.google.api.Http-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/google/api/#frequenz.microgrid.betterproto.google.api.Http.fully_decode_reserved_expansion","title":"fully_decode_reserved_expansion  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fully_decode_reserved_expansion: bool = bool_field(2)\n</code></pre> <p>When set to true, URL path parmeters will be fully URI-decoded except in cases of single segment matches in reserved expansion, where \"%2F\" will be left encoded. The default behavior is to not decode RFC 6570 reserved characters in multi segment matches.</p>"},{"location":"reference/frequenz/microgrid/betterproto/google/api/#frequenz.microgrid.betterproto.google.api.Http.rules","title":"rules  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rules: List[HttpRule] = message_field(1)\n</code></pre> <p>A list of HTTP configuration rules that apply to individual API methods. NOTE: All service configuration rules follow \"last one wins\" order.</p>"},{"location":"reference/frequenz/microgrid/betterproto/google/api/#frequenz.microgrid.betterproto.google.api.HttpRule","title":"frequenz.microgrid.betterproto.google.api.HttpRule  <code>dataclass</code>","text":"<p>             Bases: <code>Message</code></p> <p><code>HttpRule</code> defines the mapping of an RPC method to one or more HTTP REST API methods. The mapping specifies how different portions of the RPC request message are mapped to URL path, URL query parameters, and HTTP request body. The mapping is typically specified as an <code>google.api.http</code> annotation on the RPC method, see \"google/api/annotations.proto\" for details. The mapping consists of a field specifying the path template and method kind.  The path template can refer to fields in the request message, as in the example below which describes a REST GET operation on a resource collection of messages:     service Messaging {       rpc GetMessage(GetMessageRequest) returns (Message) {         option (google.api.http).get = \"/v1/messages/{message_id}/{sub.subfield}\";       } }     message GetMessageRequest {       message SubMessage {         string subfield = 1;       }       string message_id = 1; // mapped to the URL SubMessage sub = 2;    // <code>sub.subfield</code> is url-mapped     }     message Message {       string text = 1; // content of the resource     } The same http annotation can alternatively be expressed inside the <code>GRPC API Configuration</code> YAML file.     http:       rules:         - selector: .Messaging.GetMessage           get: /v1/messages/{message_id}/{sub.subfield} This definition enables an automatic, bidrectional mapping of HTTP JSON to RPC. Example: HTTP | RPC -----|----- <code>GET /v1/messages/123456/foo</code>  | <code>GetMessage(message_id: \"123456\" sub: SubMessage(subfield: \"foo\"))</code> In general, not only fields but also field paths can be referenced from a path pattern. Fields mapped to the path pattern cannot be repeated and must have a primitive (non-message) type. Any fields in the request message which are not bound by the path pattern automatically become (optional) HTTP query parameters. Assume the following definition of the request message:     service Messaging { rpc GetMessage(GetMessageRequest) returns (Message) {         option (google.api.http).get = \"/v1/messages/{message_id}\";       }     } message GetMessageRequest {       message SubMessage {         string subfield = 1;       }       string message_id = 1; // mapped to the URL int64 revision = 2;    // becomes a parameter       SubMessage sub = 3; // <code>sub.subfield</code> becomes a parameter     } This enables a HTTP JSON to RPC mapping as below: HTTP | RPC -----|----- <code>GET /v1/messages/123456?revision=2&amp;sub.subfield=foo</code> | <code>GetMessage(message_id: \"123456\" revision: 2 sub: SubMessage(subfield: \"foo\"))</code> Note that fields which are mapped to HTTP parameters must have a primitive type or a repeated primitive type. Message types are not allowed. In the case of a repeated type, the parameter can be repeated in the URL, as in <code>...?param=A&amp;param=B</code>. For HTTP method kinds which allow a request body, the <code>body</code> field specifies the mapping. Consider a REST update method on the message resource collection:     service Messaging {       rpc UpdateMessage(UpdateMessageRequest) returns (Message) {         option (google.api.http) = {           put: \"/v1/messages/{message_id}\" body: \"message\"         };       }     }     message UpdateMessageRequest { string message_id = 1; // mapped to the URL       Message message = 2;   // mapped to the body     } The following HTTP JSON to RPC mapping is enabled, where the representation of the JSON in the request body is determined by protos JSON encoding: HTTP | RPC -----|----- <code>PUT /v1/messages/123456 { \"text\": \"Hi!\" }</code> | <code>UpdateMessage(message_id: \"123456\" message { text: \"Hi!\" })</code> The special name <code>*</code> can be used in the body mapping to define that every field not bound by the path template should be mapped to the request body.  This enables the following alternative definition of the update method:     service Messaging {       rpc UpdateMessage(Message) returns (Message) {         option (google.api.http) = {           put: \"/v1/messages/{message_id}\"           body: \"\"         };       }     } message Message {       string message_id = 1;       string text = 2;     } The following HTTP JSON to RPC mapping is enabled: HTTP | RPC -----|----- <code>PUT /v1/messages/123456 { \"text\": \"Hi!\" }</code> | <code>UpdateMessage(message_id: \"123456\" text: \"Hi!\")</code> Note that when using <code>*</code> in the body mapping, it is not possible to have HTTP parameters, as all fields not bound by the path end in the body. This makes this option more rarely used in practice of defining REST APIs. The common usage of <code>*</code> is in custom methods which don't use the URL at all for transferring data. It is possible to define multiple HTTP methods for one RPC by using the <code>additional_bindings</code> option. Example:     service Messaging {       rpc GetMessage(GetMessageRequest) returns (Message) {         option (google.api.http) = {           get: \"/v1/messages/{message_id}\" additional_bindings {             get: \"/v1/users/{user_id}/messages/{message_id}\"           }         };       } }     message GetMessageRequest {       string message_id = 1;       string user_id = 2;     } This enables the following two alternative HTTP JSON to RPC mappings: HTTP | RPC -----|----- <code>GET /v1/messages/123456</code> | <code>GetMessage(message_id: \"123456\")</code> <code>GET /v1/users/me/messages/123456</code> | <code>GetMessage(user_id: \"me\" message_id: \"123456\")</code> # Rules for HTTP mapping The rules for mapping HTTP path, query parameters, and body fields to the request message are as follows: 1. The <code>body</code> field specifies either <code>*</code> or a field path, or is    omitted. If omitted, it indicates there is no HTTP request body. 2. Leaf fields (recursive expansion of nested messages in the request) can be classified into three types:     (a) Matched in the URL template.     (b) Covered by body (if body is <code>*</code>, everything except (a) fields;         else everything under the body field)     (c) All other fields. 3. URL query parameters found in the HTTP request are mapped to (c) fields. 4. Any body sent with an HTTP request can contain only (b) fields. The syntax of the path template is as follows:     Template = \"/\" Segments [ Verb ] ;     Segments = Segment { \"/\" Segment } ;     Segment  = \"\" | \"\" | LITERAL | Variable ;     Variable = \"{\" FieldPath [ \"=\" Segments ] \"}\" ;     FieldPath = IDENT { \".\" IDENT } ;     Verb     = \":\" LITERAL ; The syntax <code>*</code> matches a single path segment. The syntax <code>**</code> matches zero or more path segments, which must be the last part of the path except the <code>Verb</code>. The syntax <code>LITERAL</code> matches literal text in the path. The syntax <code>Variable</code> matches part of the URL path as specified by its template. A variable template must not contain other variables. If a variable matches a single path segment, its template may be omitted, e.g. <code>{var}</code> is equivalent to <code>{var=*}</code>. If a variable contains exactly one path segment, such as <code>\"{var}\"</code> or <code>\"{var=*}\"</code>, when such a variable is expanded into a URL path, all characters except <code>[-_.~0-9a-zA-Z]</code> are percent-encoded. Such variables show up in the Discovery Document as <code>{var}</code>. If a variable contains one or more path segments, such as <code>\"{var=foo/*}\"</code> or <code>\"{var=**}\"</code>, when such a variable is expanded into a URL path, all characters except <code>[-_.~/0-9a-zA-Z]</code> are percent-encoded. Such variables show up in the Discovery Document as <code>{+var}</code>. NOTE: While the single segment variable matches the semantics of RFC 6570 Section 3.2.2 Simple String Expansion, the multi segment variable does not** match RFC 6570 Reserved Expansion. The reason is that the Reserved Expansion does not expand special characters like <code>?</code> and <code>#</code>, which would lead to invalid URLs. NOTE: the field paths in variables and in the <code>body</code> must not refer to repeated fields or map fields. Source code in <code>src/frequenz/microgrid/betterproto/google/api/__init__.py</code> <pre><code>@dataclass(eq=False, repr=False)\nclass HttpRule(betterproto.Message):\n    \"\"\"\n    `HttpRule` defines the mapping of an RPC method to one or more HTTP REST\n    API methods. The mapping specifies how different portions of the RPC\n    request message are mapped to URL path, URL query parameters, and HTTP\n    request body. The mapping is typically specified as an `google.api.http`\n    annotation on the RPC method, see \"google/api/annotations.proto\" for\n    details. The mapping consists of a field specifying the path template and\n    method kind.  The path template can refer to fields in the request message,\n    as in the example below which describes a REST GET operation on a resource\n    collection of messages:     service Messaging {       rpc\n    GetMessage(GetMessageRequest) returns (Message) {         option\n    (google.api.http).get = \"/v1/messages/{message_id}/{sub.subfield}\";       }\n    }     message GetMessageRequest {       message SubMessage {         string\n    subfield = 1;       }       string message_id = 1; // mapped to the URL\n    SubMessage sub = 2;    // `sub.subfield` is url-mapped     }     message\n    Message {       string text = 1; // content of the resource     } The same\n    http annotation can alternatively be expressed inside the `GRPC API\n    Configuration` YAML file.     http:       rules:         - selector:\n    &lt;proto_package_name&gt;.Messaging.GetMessage           get:\n    /v1/messages/{message_id}/{sub.subfield} This definition enables an\n    automatic, bidrectional mapping of HTTP JSON to RPC. Example: HTTP | RPC\n    -----|----- `GET /v1/messages/123456/foo`  | `GetMessage(message_id:\n    \"123456\" sub: SubMessage(subfield: \"foo\"))` In general, not only fields but\n    also field paths can be referenced from a path pattern. Fields mapped to\n    the path pattern cannot be repeated and must have a primitive (non-message)\n    type. Any fields in the request message which are not bound by the path\n    pattern automatically become (optional) HTTP query parameters. Assume the\n    following definition of the request message:     service Messaging {\n    rpc GetMessage(GetMessageRequest) returns (Message) {         option\n    (google.api.http).get = \"/v1/messages/{message_id}\";       }     }\n    message GetMessageRequest {       message SubMessage {         string\n    subfield = 1;       }       string message_id = 1; // mapped to the URL\n    int64 revision = 2;    // becomes a parameter       SubMessage sub = 3;\n    // `sub.subfield` becomes a parameter     } This enables a HTTP JSON to RPC\n    mapping as below: HTTP | RPC -----|----- `GET\n    /v1/messages/123456?revision=2&amp;sub.subfield=foo` | `GetMessage(message_id:\n    \"123456\" revision: 2 sub: SubMessage(subfield: \"foo\"))` Note that fields\n    which are mapped to HTTP parameters must have a primitive type or a\n    repeated primitive type. Message types are not allowed. In the case of a\n    repeated type, the parameter can be repeated in the URL, as in\n    `...?param=A&amp;param=B`. For HTTP method kinds which allow a request body,\n    the `body` field specifies the mapping. Consider a REST update method on\n    the message resource collection:     service Messaging {       rpc\n    UpdateMessage(UpdateMessageRequest) returns (Message) {         option\n    (google.api.http) = {           put: \"/v1/messages/{message_id}\"\n    body: \"message\"         };       }     }     message UpdateMessageRequest {\n    string message_id = 1; // mapped to the URL       Message message = 2;   //\n    mapped to the body     } The following HTTP JSON to RPC mapping is enabled,\n    where the representation of the JSON in the request body is determined by\n    protos JSON encoding: HTTP | RPC -----|----- `PUT /v1/messages/123456 {\n    \"text\": \"Hi!\" }` | `UpdateMessage(message_id: \"123456\" message { text:\n    \"Hi!\" })` The special name `*` can be used in the body mapping to define\n    that every field not bound by the path template should be mapped to the\n    request body.  This enables the following alternative definition of the\n    update method:     service Messaging {       rpc UpdateMessage(Message)\n    returns (Message) {         option (google.api.http) = {           put:\n    \"/v1/messages/{message_id}\"           body: \"*\"         };       }     }\n    message Message {       string message_id = 1;       string text = 2;     }\n    The following HTTP JSON to RPC mapping is enabled: HTTP | RPC -----|-----\n    `PUT /v1/messages/123456 { \"text\": \"Hi!\" }` | `UpdateMessage(message_id:\n    \"123456\" text: \"Hi!\")` Note that when using `*` in the body mapping, it is\n    not possible to have HTTP parameters, as all fields not bound by the path\n    end in the body. This makes this option more rarely used in practice of\n    defining REST APIs. The common usage of `*` is in custom methods which\n    don't use the URL at all for transferring data. It is possible to define\n    multiple HTTP methods for one RPC by using the `additional_bindings`\n    option. Example:     service Messaging {       rpc\n    GetMessage(GetMessageRequest) returns (Message) {         option\n    (google.api.http) = {           get: \"/v1/messages/{message_id}\"\n    additional_bindings {             get:\n    \"/v1/users/{user_id}/messages/{message_id}\"           }         };       }\n    }     message GetMessageRequest {       string message_id = 1;       string\n    user_id = 2;     } This enables the following two alternative HTTP JSON to\n    RPC mappings: HTTP | RPC -----|----- `GET /v1/messages/123456` |\n    `GetMessage(message_id: \"123456\")` `GET /v1/users/me/messages/123456` |\n    `GetMessage(user_id: \"me\" message_id: \"123456\")` # Rules for HTTP mapping\n    The rules for mapping HTTP path, query parameters, and body fields to the\n    request message are as follows: 1. The `body` field specifies either `*` or\n    a field path, or is    omitted. If omitted, it indicates there is no HTTP\n    request body. 2. Leaf fields (recursive expansion of nested messages in the\n    request) can be classified into three types:     (a) Matched in the URL\n    template.     (b) Covered by body (if body is `*`, everything except (a)\n    fields;         else everything under the body field)     (c) All other\n    fields. 3. URL query parameters found in the HTTP request are mapped to (c)\n    fields. 4. Any body sent with an HTTP request can contain only (b) fields.\n    The syntax of the path template is as follows:     Template = \"/\" Segments\n    [ Verb ] ;     Segments = Segment { \"/\" Segment } ;     Segment  = \"*\" |\n    \"**\" | LITERAL | Variable ;     Variable = \"{\" FieldPath [ \"=\" Segments ]\n    \"}\" ;     FieldPath = IDENT { \".\" IDENT } ;     Verb     = \":\" LITERAL ;\n    The syntax `*` matches a single path segment. The syntax `**` matches zero\n    or more path segments, which must be the last part of the path except the\n    `Verb`. The syntax `LITERAL` matches literal text in the path. The syntax\n    `Variable` matches part of the URL path as specified by its template. A\n    variable template must not contain other variables. If a variable matches a\n    single path segment, its template may be omitted, e.g. `{var}` is\n    equivalent to `{var=*}`. If a variable contains exactly one path segment,\n    such as `\"{var}\"` or `\"{var=*}\"`, when such a variable is expanded into a\n    URL path, all characters except `[-_.~0-9a-zA-Z]` are percent-encoded. Such\n    variables show up in the Discovery Document as `{var}`. If a variable\n    contains one or more path segments, such as `\"{var=foo/*}\"` or\n    `\"{var=**}\"`, when such a variable is expanded into a URL path, all\n    characters except `[-_.~/0-9a-zA-Z]` are percent-encoded. Such variables\n    show up in the Discovery Document as `{+var}`. NOTE: While the single\n    segment variable matches the semantics of [RFC\n    6570](https://tools.ietf.org/html/rfc6570) Section 3.2.2 Simple String\n    Expansion, the multi segment variable **does not** match RFC 6570 Reserved\n    Expansion. The reason is that the Reserved Expansion does not expand\n    special characters like `?` and `#`, which would lead to invalid URLs.\n    NOTE: the field paths in variables and in the `body` must not refer to\n    repeated fields or map fields.\n    \"\"\"\n\n    selector: str = betterproto.string_field(1)\n    \"\"\"\n    Selects methods to which this rule applies. Refer to\n    [selector][google.api.DocumentationRule.selector] for syntax details.\n    \"\"\"\n\n    get: str = betterproto.string_field(2, group=\"pattern\")\n    \"\"\"Used for listing and getting information about resources.\"\"\"\n\n    put: str = betterproto.string_field(3, group=\"pattern\")\n    \"\"\"Used for updating a resource.\"\"\"\n\n    post: str = betterproto.string_field(4, group=\"pattern\")\n    \"\"\"Used for creating a resource.\"\"\"\n\n    delete: str = betterproto.string_field(5, group=\"pattern\")\n    \"\"\"Used for deleting a resource.\"\"\"\n\n    patch: str = betterproto.string_field(6, group=\"pattern\")\n    \"\"\"Used for updating a resource.\"\"\"\n\n    custom: \"CustomHttpPattern\" = betterproto.message_field(8, group=\"pattern\")\n    \"\"\"\n    The custom pattern is used for specifying an HTTP method that is not\n    included in the `pattern` field, such as HEAD, or \"*\" to leave the HTTP\n    method unspecified for this rule. The wild-card rule is useful for services\n    that provide content to Web (HTML) clients.\n    \"\"\"\n\n    body: str = betterproto.string_field(7)\n    \"\"\"\n    The name of the request field whose value is mapped to the HTTP body, or\n    `*` for mapping all fields not captured by the path pattern to the HTTP\n    body. NOTE: the referred field must not be a repeated field and must be\n    present at the top-level of request message type.\n    \"\"\"\n\n    response_body: str = betterproto.string_field(12)\n    \"\"\"\n    Optional. The name of the response field whose value is mapped to the HTTP\n    body of response. Other response fields are ignored. When not set, the\n    response message will be used as HTTP body of response.\n    \"\"\"\n\n    additional_bindings: List[\"HttpRule\"] = betterproto.message_field(11)\n    \"\"\"\n    Additional HTTP bindings for the selector. Nested bindings must not contain\n    an `additional_bindings` field themselves (that is, the nesting may only be\n    one level deep).\n    \"\"\"\n</code></pre>"},{"location":"reference/frequenz/microgrid/betterproto/google/api/#frequenz.microgrid.betterproto.google.api.HttpRule-attributes","title":"Attributes","text":""},{"location":"reference/frequenz/microgrid/betterproto/google/api/#frequenz.microgrid.betterproto.google.api.HttpRule.additional_bindings","title":"additional_bindings  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>additional_bindings: List[HttpRule] = message_field(11)\n</code></pre> <p>Additional HTTP bindings for the selector. Nested bindings must not contain an <code>additional_bindings</code> field themselves (that is, the nesting may only be one level deep).</p>"},{"location":"reference/frequenz/microgrid/betterproto/google/api/#frequenz.microgrid.betterproto.google.api.HttpRule.body","title":"body  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>body: str = string_field(7)\n</code></pre> <p>The name of the request field whose value is mapped to the HTTP body, or <code>*</code> for mapping all fields not captured by the path pattern to the HTTP body. NOTE: the referred field must not be a repeated field and must be present at the top-level of request message type.</p>"},{"location":"reference/frequenz/microgrid/betterproto/google/api/#frequenz.microgrid.betterproto.google.api.HttpRule.custom","title":"custom  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>custom: CustomHttpPattern = message_field(\n    8, group=\"pattern\"\n)\n</code></pre> <p>The custom pattern is used for specifying an HTTP method that is not included in the <code>pattern</code> field, such as HEAD, or \"*\" to leave the HTTP method unspecified for this rule. The wild-card rule is useful for services that provide content to Web (HTML) clients.</p>"},{"location":"reference/frequenz/microgrid/betterproto/google/api/#frequenz.microgrid.betterproto.google.api.HttpRule.delete","title":"delete  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>delete: str = string_field(5, group='pattern')\n</code></pre> <p>Used for deleting a resource.</p>"},{"location":"reference/frequenz/microgrid/betterproto/google/api/#frequenz.microgrid.betterproto.google.api.HttpRule.get","title":"get  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>get: str = string_field(2, group='pattern')\n</code></pre> <p>Used for listing and getting information about resources.</p>"},{"location":"reference/frequenz/microgrid/betterproto/google/api/#frequenz.microgrid.betterproto.google.api.HttpRule.patch","title":"patch  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>patch: str = string_field(6, group='pattern')\n</code></pre> <p>Used for updating a resource.</p>"},{"location":"reference/frequenz/microgrid/betterproto/google/api/#frequenz.microgrid.betterproto.google.api.HttpRule.post","title":"post  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>post: str = string_field(4, group='pattern')\n</code></pre> <p>Used for creating a resource.</p>"},{"location":"reference/frequenz/microgrid/betterproto/google/api/#frequenz.microgrid.betterproto.google.api.HttpRule.put","title":"put  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>put: str = string_field(3, group='pattern')\n</code></pre> <p>Used for updating a resource.</p>"},{"location":"reference/frequenz/microgrid/betterproto/google/api/#frequenz.microgrid.betterproto.google.api.HttpRule.response_body","title":"response_body  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>response_body: str = string_field(12)\n</code></pre> <p>Optional. The name of the response field whose value is mapped to the HTTP body of response. Other response fields are ignored. When not set, the response message will be used as HTTP body of response.</p>"},{"location":"reference/frequenz/microgrid/betterproto/google/api/#frequenz.microgrid.betterproto.google.api.HttpRule.selector","title":"selector  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>selector: str = string_field(1)\n</code></pre> <p>Selects methods to which this rule applies. Refer to selector for syntax details.</p>"}]}